Name:         elasticsearchautoscalers.autoscaling.k8s.elastic.co
Namespace:    
Labels:       app.kubernetes.io/instance=elastic-operator
              app.kubernetes.io/managed-by=Helm
              app.kubernetes.io/name=eck-operator-crds
              app.kubernetes.io/version=3.0.0
              helm.sh/chart=eck-operator-crds-3.0.0
Annotations:  controller-gen.kubebuilder.io/version: v0.17.2
              helm.sh/resource-policy: keep
              meta.helm.sh/release-name: elastic-operator
              meta.helm.sh/release-namespace: elk-ns
API Version:  apiextensions.k8s.io/v1
Kind:         CustomResourceDefinition
Metadata:
  Creation Timestamp:  2025-05-07T13:27:20Z
  Generation:          1
  Resource Version:    957453
  UID:                 bbae69d9-58dd-4c6f-be26-425b1106d445
Spec:
  Conversion:
    Strategy:  None
  Group:       autoscaling.k8s.elastic.co
  Names:
    Categories:
      elastic
    Kind:       ElasticsearchAutoscaler
    List Kind:  ElasticsearchAutoscalerList
    Plural:     elasticsearchautoscalers
    Short Names:
      esa
    Singular:  elasticsearchautoscaler
  Scope:       Namespaced
  Versions:
    Additional Printer Columns:
      Json Path:  .spec.elasticsearchRef.name
      Name:       Target
      Type:       string
      Json Path:  .status.conditions[?(@.type=='Active')].status
      Name:       Active
      Type:       string
      Json Path:  .status.conditions[?(@.type=='Healthy')].status
      Name:       Healthy
      Type:       string
      Json Path:  .status.conditions[?(@.type=='Limited')].status
      Name:       Limited
      Type:       string
    Name:         v1alpha1
    Schema:
      openAPIV3Schema:
        Description:  ElasticsearchAutoscaler represents an ElasticsearchAutoscaler resource in a Kubernetes cluster.
        Properties:
          API Version:
            Description:  APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            Type:  string
          Kind:
            Description:  Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            Type:  string
          Metadata:
            Type:  object
          Spec:
            Description:  ElasticsearchAutoscalerSpec holds the specification of an Elasticsearch autoscaler resource.
            Properties:
              Elasticsearch Ref:
                Description:  ElasticsearchRef is a reference to an Elasticsearch cluster that exists in the same namespace.
                Properties:
                  Name:
                    Description:  Name is the name of the Elasticsearch resource to scale automatically.
                    Min Length:   1
                    Type:         string
                Type:             object
              Policies:
                Items:
                  Description:  AutoscalingPolicySpec holds a named autoscaling policy and the associated resources limits (cpu, memory, storage).
                  Properties:
                    Deciders:
                      Additional Properties:
                        Additional Properties:
                          Type:       string
                        Description:  DeciderSettings allow the user to tweak autoscaling deciders.
The map data structure complies with the <key,value> format expected by Elasticsearch.
                        Type:       object
                      Description:  Deciders allow the user to override default settings for autoscaling deciders.
                      Type:         object
                    Name:
                      Description:  Name identifies the autoscaling policy in the autoscaling specification.
                      Type:         string
                    Resources:
                      Description:  AutoscalingResources model the limits, submitted by the user, for the supported resources in an autoscaling policy.
Only the node count range is mandatory. For other resources, a limit range is required only
if the Elasticsearch autoscaling capacity API returns a requirement for a given resource.
For example, the memory limit range is only required if the autoscaling API response contains a memory requirement.
If there is no limit range for a resource, and if that resource is not mandatory, then the resources in the NodeSets
managed by the autoscaling policy are left untouched.
                      Properties:
                        Cpu:
                          Description:  QuantityRange models a resource limit range for resources which can be expressed with resource.Quantity.
                          Properties:
                            Max:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Description:                         Max represents the upper limit for the resources managed by the autoscaler.
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Min:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Description:                         Min represents the lower limit for the resources managed by the autoscaler.
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Requests To Limits Ratio:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Description:                         RequestsToLimitsRatio allows to customize Kubernetes resource Limit based on the Request.
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                          Required:
                            max
                            min
                          Type:  object
                        Memory:
                          Description:  QuantityRange models a resource limit range for resources which can be expressed with resource.Quantity.
                          Properties:
                            Max:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Description:                         Max represents the upper limit for the resources managed by the autoscaler.
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Min:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Description:                         Min represents the lower limit for the resources managed by the autoscaler.
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Requests To Limits Ratio:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Description:                         RequestsToLimitsRatio allows to customize Kubernetes resource Limit based on the Request.
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                          Required:
                            max
                            min
                          Type:  object
                        Node Count:
                          Description:  NodeCountRange is used to model the minimum and the maximum number of nodes over all the NodeSets managed by the same autoscaling policy.
                          Properties:
                            Max:
                              Description:  Max represents the maximum number of nodes in a tier.
                              Format:       int32
                              Type:         integer
                            Min:
                              Description:  Min represents the minimum number of nodes in a tier.
                              Format:       int32
                              Type:         integer
                          Required:
                            max
                            min
                          Type:  object
                        Storage:
                          Description:  QuantityRange models a resource limit range for resources which can be expressed with resource.Quantity.
                          Properties:
                            Max:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Description:                         Max represents the upper limit for the resources managed by the autoscaler.
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Min:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Description:                         Min represents the lower limit for the resources managed by the autoscaler.
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Requests To Limits Ratio:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Description:                         RequestsToLimitsRatio allows to customize Kubernetes resource Limit based on the Request.
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                          Required:
                            max
                            min
                          Type:  object
                      Required:
                        nodeCount
                      Type:  object
                    Roles:
                      Description:  An autoscaling policy must target a unique set of roles.
                      Items:
                        Type:  string
                      Type:    array
                  Required:
                    resources
                  Type:  object
                Type:    array
              Polling Period:
                Description:  PollingPeriod is the period at which to synchronize with the Elasticsearch autoscaling API.
                Type:         string
            Required:
              elasticsearchRef
              policies
            Type:  object
          Status:
            Properties:
              Conditions:
                Description:  Conditions holds the current service state of the autoscaling controller.
                Items:
                  Description:  Condition represents Elasticsearch resource's condition.
**This API is in technical preview and may be changed or removed in a future release.**
                  Properties:
                    Last Transition Time:
                      Format:  date-time
                      Type:    string
                    Message:
                      Type:  string
                    Status:
                      Type:  string
                    Type:
                      Description:  ConditionType defines the condition of an Elasticsearch resource.
                      Type:         string
                  Required:
                    status
                    type
                  Type:  object
                Type:    array
              Observed Generation:
                Description:  ObservedGeneration is the last observed generation by the controller.
                Format:       int64
                Type:         integer
              Policies:
                Description:  AutoscalingPolicyStatuses is used to expose state messages to user or external system.
                Items:
                  Properties:
                    Last Modification Time:
                      Description:  LastModificationTime is the last time the resources have been updated, used by the cooldown algorithm.
                      Format:       date-time
                      Type:         string
                    Name:
                      Description:  Name is the name of the autoscaling policy
                      Type:         string
                    Node Sets:
                      Description:  NodeSetNodeCount holds the number of nodes for each nodeSet.
                      Items:
                        Description:  NodeSetNodeCount models the number of nodes expected in a given NodeSet.
                        Properties:
                          Name:
                            Description:  Name of the Nodeset.
                            Type:         string
                          Node Count:
                            Description:  NodeCount is the number of nodes, as computed by the autoscaler, expected in this NodeSet.
                            Format:       int32
                            Type:         integer
                        Required:
                          name
                          nodeCount
                        Type:  object
                      Type:    array
                    Resources:
                      Description:  ResourcesSpecification holds the resource values common to all the nodeSets managed by a same autoscaling policy.
Only the resources managed by the autoscaling controller are saved in the Status.
                      Properties:
                        Limits:
                          Additional Properties:
                            Any Of:
                              Type:                              integer
                              Type:                              string
                            Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            X - Kubernetes - Int - Or - String:  true
                          Description:                           ResourceList is a set of (resource name, quantity) pairs.
                          Type:                                  object
                        Requests:
                          Additional Properties:
                            Any Of:
                              Type:                              integer
                              Type:                              string
                            Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            X - Kubernetes - Int - Or - String:  true
                          Description:                           ResourceList is a set of (resource name, quantity) pairs.
                          Type:                                  object
                      Type:                                      object
                    State:
                      Description:  PolicyStates may contain various messages regarding the current state of this autoscaling policy.
                      Items:
                        Properties:
                          Messages:
                            Items:
                              Type:  string
                            Type:    array
                          Type:
                            Type:  string
                        Required:
                          messages
                          type
                        Type:  object
                      Type:    array
                  Required:
                    name
                  Type:  object
                Type:    array
            Type:        object
        Type:            object
    Served:              true
    Storage:             true
    Subresources:
      Status:
Status:
  Accepted Names:
    Categories:
      elastic
    Kind:       ElasticsearchAutoscaler
    List Kind:  ElasticsearchAutoscalerList
    Plural:     elasticsearchautoscalers
    Short Names:
      esa
    Singular:  elasticsearchautoscaler
  Conditions:
    Last Transition Time:  2025-05-07T13:27:20Z
    Message:               no conflicts found
    Reason:                NoConflicts
    Status:                True
    Type:                  NamesAccepted
    Last Transition Time:  2025-05-07T13:27:20Z
    Message:               the initial names have been accepted
    Reason:                InitialNamesAccepted
    Status:                True
    Type:                  Established
  Stored Versions:
    v1alpha1
Events:  <none>

Name:         elasticsearches.elasticsearch.k8s.elastic.co
Namespace:    
Labels:       app.kubernetes.io/instance=elastic-operator
              app.kubernetes.io/managed-by=Helm
              app.kubernetes.io/name=eck-operator-crds
              app.kubernetes.io/version=3.0.0
              helm.sh/chart=eck-operator-crds-3.0.0
Annotations:  controller-gen.kubebuilder.io/version: v0.17.2
              helm.sh/resource-policy: keep
              meta.helm.sh/release-name: elastic-operator
              meta.helm.sh/release-namespace: elk-ns
API Version:  apiextensions.k8s.io/v1
Kind:         CustomResourceDefinition
Metadata:
  Creation Timestamp:  2025-05-07T13:27:20Z
  Generation:          1
  Resource Version:    957528
  UID:                 1e7aef7a-4c91-4b55-8ce2-2c93b8d1aa57
Spec:
  Conversion:
    Strategy:  None
  Group:       elasticsearch.k8s.elastic.co
  Names:
    Categories:
      elastic
    Kind:       Elasticsearch
    List Kind:  ElasticsearchList
    Plural:     elasticsearches
    Short Names:
      es
    Singular:  elasticsearch
  Scope:       Namespaced
  Versions:
    Additional Printer Columns:
      Json Path:    .status.health
      Name:         health
      Type:         string
      Description:  Available nodes
      Json Path:    .status.availableNodes
      Name:         nodes
      Type:         integer
      Description:  Elasticsearch version
      Json Path:    .status.version
      Name:         version
      Type:         string
      Json Path:    .status.phase
      Name:         phase
      Type:         string
      Json Path:    .metadata.creationTimestamp
      Name:         age
      Type:         date
    Name:           v1
    Schema:
      openAPIV3Schema:
        Description:  Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
        Properties:
          API Version:
            Description:  APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            Type:  string
          Kind:
            Description:  Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            Type:  string
          Metadata:
            Type:  object
          Spec:
            Description:  ElasticsearchSpec holds the specification of an Elasticsearch cluster.
            Properties:
              Auth:
                Description:  Auth contains user authentication and authorization security settings for Elasticsearch.
                Properties:
                  Disable Elastic User:
                    Description:  DisableElasticUser disables the default elastic user that is created by ECK.
                    Type:         boolean
                  File Realm:
                    Description:  FileRealm to propagate to the Elasticsearch cluster.
                    Items:
                      Description:  FileRealmSource references users to create in the Elasticsearch cluster.
                      Properties:
                        Secret Name:
                          Description:  SecretName is the name of the secret.
                          Type:         string
                      Type:             object
                    Type:               array
                  Roles:
                    Description:  Roles to propagate to the Elasticsearch cluster.
                    Items:
                      Description:  RoleSource references roles to create in the Elasticsearch cluster.
                      Properties:
                        Secret Name:
                          Description:  SecretName is the name of the secret.
                          Type:         string
                      Type:             object
                    Type:               array
                Type:                   object
              Http:
                Description:  HTTP holds HTTP layer settings for Elasticsearch.
                Properties:
                  Service:
                    Description:  Service defines the template for the associated Kubernetes Service object.
                    Properties:
                      Metadata:
                        Description:  ObjectMeta is the metadata of the service.
The name and namespace provided here are managed by ECK and will be ignored.
                        Properties:
                          Annotations:
                            Additional Properties:
                              Type:  string
                            Type:    object
                          Finalizers:
                            Items:
                              Type:  string
                            Type:    array
                          Labels:
                            Additional Properties:
                              Type:  string
                            Type:    object
                          Name:
                            Type:  string
                          Namespace:
                            Type:  string
                        Type:      object
                      Spec:
                        Description:  Spec is the specification of the service.
                        Properties:
                          Allocate Load Balancer Node Ports:
                            Description:  allocateLoadBalancerNodePorts defines if NodePorts will be automatically
allocated for services with type LoadBalancer.  Default is "true". It
may be set to "false" if the cluster load-balancer does not rely on
NodePorts.  If the caller requests specific NodePorts (by specifying a
value), those requests will be respected, regardless of this field.
This field may only be set for services with type LoadBalancer and will
be cleared if the type is changed to any other type.
                            Type:  boolean
                          Cluster IP:
                            Description:  clusterIP is the IP address of the service and is usually assigned
randomly. If an address is specified manually, is in-range (as per
system configuration), and is not in use, it will be allocated to the
service; otherwise creation of the service will fail. This field may not
be changed through updates unless the type field is also being changed
to ExternalName (which requires this field to be blank) or the type
field is being changed from ExternalName (in which case this field may
optionally be specified, as describe above).  Valid values are "None",
empty string (""), or a valid IP address. Setting this to "None" makes a
"headless service" (no virtual IP), which is useful when direct endpoint
connections are preferred and proxying is not required.  Only applies to
types ClusterIP, NodePort, and LoadBalancer. If this field is specified
when creating a Service of type ExternalName, creation will fail. This
field will be wiped when updating a Service to type ExternalName.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                            Type:  string
                          Cluster I Ps:
                            Description:  ClusterIPs is a list of IP addresses assigned to this service, and are
usually assigned randomly.  If an address is specified manually, is
in-range (as per system configuration), and is not in use, it will be
allocated to the service; otherwise creation of the service will fail.
This field may not be changed through updates unless the type field is
also being changed to ExternalName (which requires this field to be
empty) or the type field is being changed from ExternalName (in which
case this field may optionally be specified, as describe above).  Valid
values are "None", empty string (""), or a valid IP address.  Setting
this to "None" makes a "headless service" (no virtual IP), which is
useful when direct endpoint connections are preferred and proxying is
not required.  Only applies to types ClusterIP, NodePort, and
LoadBalancer. If this field is specified when creating a Service of type
ExternalName, creation will fail. This field will be wiped when updating
a Service to type ExternalName.  If this field is not specified, it will
be initialized from the clusterIP field.  If this field is specified,
clients must ensure that clusterIPs[0] and clusterIP have the same
value.

This field may hold a maximum of two entries (dual-stack IPs, in either order).
These IPs must correspond to the values of the ipFamilies field. Both
clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                            Items:
                              Type:                        string
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          External I Ps:
                            Description:  externalIPs is a list of IP addresses for which nodes in the cluster
will also accept traffic for this service.  These IPs are not managed by
Kubernetes.  The user is responsible for ensuring that traffic arrives
at a node with this IP.  A common example is external load-balancers
that are not part of the Kubernetes system.
                            Items:
                              Type:                        string
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          External Name:
                            Description:  externalName is the external reference that discovery mechanisms will
return as an alias for this service (e.g. a DNS CNAME record). No
proxying will be involved.  Must be a lowercase RFC-1123 hostname
(https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                            Type:  string
                          External Traffic Policy:
                            Description:  externalTrafficPolicy describes how nodes distribute service traffic they
receive on one of the Service's "externally-facing" addresses (NodePorts,
ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
the service in a way that assumes that external load balancers will take care
of balancing the service traffic between nodes, and so each node will deliver
traffic only to the node-local endpoints of the service, without masquerading
the client source IP. (Traffic mistakenly sent to a node with no endpoints will
be dropped.) The default value, "Cluster", uses the standard behavior of
routing to all endpoints evenly (possibly modified by topology and other
features). Note that traffic sent to an External IP or LoadBalancer IP from
within the cluster will always get "Cluster" semantics, but clients sending to
a NodePort from within the cluster may need to take traffic policy into account
when picking a node.
                            Type:  string
                          Health Check Node Port:
                            Description:  healthCheckNodePort specifies the healthcheck nodePort for the service.
This only applies when type is set to LoadBalancer and
externalTrafficPolicy is set to Local. If a value is specified, is
in-range, and is not in use, it will be used.  If not specified, a value
will be automatically allocated.  External systems (e.g. load-balancers)
can use this port to determine if a given node holds endpoints for this
service or not.  If this field is specified when creating a Service
which does not need it, creation will fail. This field will be wiped
when updating a Service to no longer need it (e.g. changing type).
This field cannot be updated once set.
                            Format:  int32
                            Type:    integer
                          Internal Traffic Policy:
                            Description:  InternalTrafficPolicy describes how nodes distribute service traffic they
receive on the ClusterIP. If set to "Local", the proxy will assume that pods
only want to talk to endpoints of the service on the same node as the pod,
dropping the traffic if there are no local endpoints. The default value,
"Cluster", uses the standard behavior of routing to all endpoints evenly
(possibly modified by topology and other features).
                            Type:  string
                          Ip Families:
                            Description:  IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
service. This field is usually assigned automatically based on cluster
configuration and the ipFamilyPolicy field. If this field is specified
manually, the requested family is available in the cluster,
and ipFamilyPolicy allows it, it will be used; otherwise creation of
the service will fail. This field is conditionally mutable: it allows
for adding or removing a secondary IP family, but it does not allow
changing the primary IP family of the Service. Valid values are "IPv4"
and "IPv6".  This field only applies to Services of types ClusterIP,
NodePort, and LoadBalancer, and does apply to "headless" services.
This field will be wiped when updating a Service to type ExternalName.

This field may hold a maximum of two entries (dual-stack families, in
either order).  These families must correspond to the values of the
clusterIPs field, if specified. Both clusterIPs and ipFamilies are
governed by the ipFamilyPolicy field.
                            Items:
                              Description:  IPFamily represents the IP Family (IPv4 or IPv6). This type is used
to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                              Type:                        string
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          Ip Family Policy:
                            Description:  IPFamilyPolicy represents the dual-stack-ness requested or required by
this Service. If there is no value provided, then this field will be set
to SingleStack. Services can be "SingleStack" (a single IP family),
"PreferDualStack" (two IP families on dual-stack configured clusters or
a single IP family on single-stack clusters), or "RequireDualStack"
(two IP families on dual-stack configured clusters, otherwise fail). The
ipFamilies and clusterIPs fields depend on the value of this field. This
field will be wiped when updating a service to type ExternalName.
                            Type:  string
                          Load Balancer Class:
                            Description:  loadBalancerClass is the class of the load balancer implementation this Service belongs to.
If specified, the value of this field must be a label-style identifier, with an optional prefix,
e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
balancer implementation is used, today this is typically done through the cloud provider integration,
but should apply for any default implementation. If set, it is assumed that a load balancer
implementation is watching for Services with a matching class. Any default load balancer
implementation (e.g. cloud providers) should ignore Services that set this field.
This field can only be set when creating or updating a Service to type 'LoadBalancer'.
Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                            Type:  string
                          Load Balancer IP:
                            Description:  Only applies to Service Type: LoadBalancer.
This feature depends on whether the underlying cloud-provider supports specifying
the loadBalancerIP when a load balancer is created.
This field will be ignored if the cloud-provider does not support the feature.
Deprecated: This field was under-specified and its meaning varies across implementations.
Using it is non-portable and it may not support dual-stack.
Users are encouraged to use implementation-specific annotations when available.
                            Type:  string
                          Load Balancer Source Ranges:
                            Description:  If specified and supported by the platform, this will restrict traffic through the cloud-provider
load-balancer will be restricted to the specified client IPs. This field will be ignored if the
cloud-provider does not support the feature."
More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
                            Items:
                              Type:                        string
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          Ports:
                            Description:  The list of ports that are exposed by this service.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                            Items:
                              Description:  ServicePort contains information on service's port.
                              Properties:
                                App Protocol:
                                  Description:  The application protocol for this port.
This is used as a hint for implementations to offer richer behavior for protocols that they understand.
This field follows standard Kubernetes label syntax.
Valid values are either:

* Un-prefixed protocol names - reserved for IANA standard service names (as per
RFC-6335 and https://www.iana.org/assignments/service-names).

* Kubernetes-defined prefixed names:
  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455

* Other protocols should use implementation-defined prefixed names such as
mycompany.com/my-custom-protocol.
                                  Type:  string
                                Name:
                                  Description:  The name of this port within the service. This must be a DNS_LABEL.
All ports within a ServiceSpec must have unique names. When considering
the endpoints for a Service, this must match the 'name' field in the
EndpointPort.
Optional if only one ServicePort is defined on this service.
                                  Type:  string
                                Node Port:
                                  Description:  The port on each node on which this service is exposed when type is
NodePort or LoadBalancer.  Usually assigned by the system. If a value is
specified, in-range, and not in use it will be used, otherwise the
operation will fail.  If not specified, a port will be allocated if this
Service requires one.  If this field is specified when creating a
Service which does not need it, creation will fail. This field will be
wiped when updating a Service to no longer need it (e.g. changing type
from NodePort to ClusterIP).
More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                                  Format:  int32
                                  Type:    integer
                                Port:
                                  Description:  The port that will be exposed by this service.
                                  Format:       int32
                                  Type:         integer
                                Protocol:
                                  Default:      TCP
                                  Description:  The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
Default is TCP.
                                  Type:  string
                                Target Port:
                                  Any Of:
                                    Type:       integer
                                    Type:       string
                                  Description:  Number or name of the port to access on the pods targeted by the service.
Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
If this is a string, it will be looked up as a named port in the
target Pod's container ports. If this is not specified, the value
of the 'port' field is used (an identity map).
This field is ignored for services with clusterIP=None, and should be
omitted or set equal to the 'port' field.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
                                  X - Kubernetes - Int - Or - String:  true
                              Required:
                                port
                              Type:  object
                            Type:    array
                            X - Kubernetes - List - Map - Keys:
                              port
                              protocol
                            X - Kubernetes - List - Type:  map
                          Publish Not Ready Addresses:
                            Description:  publishNotReadyAddresses indicates that any agent which deals with endpoints for this
Service should disregard any indications of ready/not-ready.
The primary use case for setting this field is for a StatefulSet's Headless Service to
propagate SRV DNS records for its Pods for the purpose of peer discovery.
The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
Services interpret this to mean that all endpoints are considered "ready" even if the
Pods themselves are not. Agents which consume only Kubernetes generated endpoints
through the Endpoints or EndpointSlice resources can safely assume this behavior.
                            Type:  boolean
                          Selector:
                            Additional Properties:
                              Type:       string
                            Description:  Route service traffic to pods with label keys and values matching this
selector. If empty or not present, the service is assumed to have an
external process managing its endpoints, which Kubernetes will not
modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
Ignored if type is ExternalName.
More info: https://kubernetes.io/docs/concepts/services-networking/service/
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Session Affinity:
                            Description:  Supports "ClientIP" and "None". Used to maintain session affinity.
Enable client IP based session affinity.
Must be ClientIP or None.
Defaults to None.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                            Type:  string
                          Session Affinity Config:
                            Description:  sessionAffinityConfig contains the configurations of session affinity.
                            Properties:
                              Client IP:
                                Description:  clientIP contains the configurations of Client IP based session affinity.
                                Properties:
                                  Timeout Seconds:
                                    Description:  timeoutSeconds specifies the seconds of ClientIP type session sticky time.
The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
Default value is 10800(for 3 hours).
                                    Format:  int32
                                    Type:    integer
                                Type:        object
                            Type:            object
                          Traffic Distribution:
                            Description:  TrafficDistribution offers a way to express preferences for how traffic is
distributed to Service endpoints. Implementations can use this field as a
hint, but are not required to guarantee strict adherence. If the field is
not set, the implementation will apply its default routing strategy. If set
to "PreferClose", implementations should prioritize endpoints that are
topologically close (e.g., same zone).
This is a beta field and requires enabling ServiceTrafficDistribution feature.
                            Type:  string
                          Type:
                            Description:  type determines how the Service is exposed. Defaults to ClusterIP. Valid
options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
"ClusterIP" allocates a cluster-internal IP address for load-balancing
to endpoints. Endpoints are determined by the selector or if that is not
specified, by manual construction of an Endpoints object or
EndpointSlice objects. If clusterIP is "None", no virtual IP is
allocated and the endpoints are published as a set of endpoints rather
than a virtual IP.
"NodePort" builds on ClusterIP and allocates a port on every node which
routes to the same endpoints as the clusterIP.
"LoadBalancer" builds on NodePort and creates an external load-balancer
(if supported in the current cloud) which routes to the same endpoints
as the clusterIP.
"ExternalName" aliases this service to the specified externalName.
Several other fields do not apply to ExternalName services.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
                            Type:  string
                        Type:      object
                    Type:          object
                  Tls:
                    Description:  TLS defines options for configuring TLS for HTTP.
                    Properties:
                      Certificate:
                        Description:  Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
The referenced secret should contain the following:

- `ca.crt`: The certificate authority (optional).
- `tls.crt`: The certificate (or a chain).
- `tls.key`: The private key to the first certificate in the certificate chain.
                        Properties:
                          Secret Name:
                            Description:  SecretName is the name of the secret.
                            Type:         string
                        Type:             object
                      Self Signed Certificate:
                        Description:  SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
                        Properties:
                          Disabled:
                            Description:  Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
                            Type:         boolean
                          Subject Alt Names:
                            Description:  SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
                            Items:
                              Description:  SubjectAlternativeName represents a SAN entry in a x509 certificate.
                              Properties:
                                Dns:
                                  Description:  DNS is the DNS name of the subject.
                                  Type:         string
                                Ip:
                                  Description:  IP is the IP address of the subject.
                                  Type:         string
                              Type:             object
                            Type:               array
                        Type:                   object
                    Type:                       object
                Type:                           object
              Image:
                Description:  Image is the Elasticsearch Docker image to deploy.
                Type:         string
              Monitoring:
                Description:  Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
Elasticsearch monitoring clusters running in the same Kubernetes cluster.
                Properties:
                  Logs:
                    Description:  Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
                    Properties:
                      Elasticsearch Refs:
                        Description:  ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
Due to existing limitations, only a single Elasticsearch cluster is currently supported.
                        Items:
                          Description:  ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
or a Secret describing an external Elastic resource not managed by the operator.
                          Properties:
                            Name:
                              Description:  Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
                              Type:         string
                            Namespace:
                              Description:  Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                              Type:         string
                            Secret Name:
                              Description:  SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
Elastic resource not managed by the operator. The referenced secret must contain the following:
- `url`: the URL to reach the Elastic resource
- `username`: the username of the user to be authenticated to the Elastic resource
- `password`: the password of the user to be authenticated to the Elastic resource
- `ca.crt`: the CA certificate in PEM format (optional)
- `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
This field cannot be used in combination with the other fields name, namespace or serviceName.
                              Type:  string
                            Service Name:
                              Description:  ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
the referenced resource is used.
                              Type:  string
                          Type:      object
                        Type:        array
                    Type:            object
                  Metrics:
                    Description:  Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
                    Properties:
                      Elasticsearch Refs:
                        Description:  ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
Due to existing limitations, only a single Elasticsearch cluster is currently supported.
                        Items:
                          Description:  ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
or a Secret describing an external Elastic resource not managed by the operator.
                          Properties:
                            Name:
                              Description:  Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
                              Type:         string
                            Namespace:
                              Description:  Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                              Type:         string
                            Secret Name:
                              Description:  SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
Elastic resource not managed by the operator. The referenced secret must contain the following:
- `url`: the URL to reach the Elastic resource
- `username`: the username of the user to be authenticated to the Elastic resource
- `password`: the password of the user to be authenticated to the Elastic resource
- `ca.crt`: the CA certificate in PEM format (optional)
- `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
This field cannot be used in combination with the other fields name, namespace or serviceName.
                              Type:  string
                            Service Name:
                              Description:  ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
the referenced resource is used.
                              Type:  string
                          Type:      object
                        Type:        array
                    Type:            object
                Type:                object
              Node Sets:
                Description:  NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
                Items:
                  Description:  NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
                  Properties:
                    Config:
                      Description:                                   Config holds the Elasticsearch configuration.
                      Type:                                          object
                      X - Kubernetes - Preserve - Unknown - Fields:  true
                    Count:
                      Description:  Count of Elasticsearch nodes to deploy.
If the node set is managed by an autoscaling policy the initial value is automatically set by the autoscaling controller.
                      Format:  int32
                      Type:    integer
                    Name:
                      Description:  Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
                      Max Length:   23
                      Pattern:      [a-zA-Z0-9-]+
                      Type:         string
                    Pod Template:
                      Description:                                   PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
                      Type:                                          object
                      X - Kubernetes - Preserve - Unknown - Fields:  true
                    Volume Claim Templates:
                      Description:  VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet.
Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate.
Items defined here take precedence over any default claims added by the operator with the same name.
                      Items:
                        Description:  PersistentVolumeClaim is a user's request for and claim to a persistent volume
                        Properties:
                          API Version:
                            Description:  APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                            Type:  string
                          Kind:
                            Description:  Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                            Type:  string
                          Metadata:
                            Description:  Standard object's metadata.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                            Properties:
                              Annotations:
                                Additional Properties:
                                  Type:  string
                                Type:    object
                              Finalizers:
                                Items:
                                  Type:  string
                                Type:    array
                              Labels:
                                Additional Properties:
                                  Type:  string
                                Type:    object
                              Name:
                                Type:  string
                              Namespace:
                                Type:  string
                            Type:      object
                          Spec:
                            Description:  spec defines the desired characteristics of a volume requested by a pod author.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                            Properties:
                              Access Modes:
                                Description:  accessModes contains the desired access modes the volume should have.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                                Items:
                                  Type:                        string
                                Type:                          array
                                X - Kubernetes - List - Type:  atomic
                              Data Source:
                                Description:  dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                                Properties:
                                  API Group:
                                    Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                    Type:  string
                                  Kind:
                                    Description:  Kind is the type of resource being referenced
                                    Type:         string
                                  Name:
                                    Description:  Name is the name of resource being referenced
                                    Type:         string
                                Required:
                                  kind
                                  name
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                              Data Source Ref:
                                Description:  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                Properties:
                                  API Group:
                                    Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                    Type:  string
                                  Kind:
                                    Description:  Kind is the type of resource being referenced
                                    Type:         string
                                  Name:
                                    Description:  Name is the name of resource being referenced
                                    Type:         string
                                  Namespace:
                                    Description:  Namespace is the namespace of resource being referenced
Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                    Type:  string
                                Required:
                                  kind
                                  name
                                Type:  object
                              Resources:
                                Description:  resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                                Properties:
                                  Limits:
                                    Additional Properties:
                                      Any Of:
                                        Type:                              integer
                                        Type:                              string
                                      Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      X - Kubernetes - Int - Or - String:  true
                                    Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                    Type:  object
                                  Requests:
                                    Additional Properties:
                                      Any Of:
                                        Type:                              integer
                                        Type:                              string
                                      Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      X - Kubernetes - Int - Or - String:  true
                                    Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                    Type:  object
                                Type:      object
                              Selector:
                                Description:  selector is a label query over volumes to consider for binding.
                                Properties:
                                  Match Expressions:
                                    Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                    Items:
                                      Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                      Properties:
                                        Key:
                                          Description:  key is the label key that the selector applies to.
                                          Type:         string
                                        Operator:
                                          Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                          Type:  string
                                        Values:
                                          Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                      Required:
                                        key
                                        operator
                                      Type:                        object
                                    Type:                          array
                                    X - Kubernetes - List - Type:  atomic
                                  Match Labels:
                                    Additional Properties:
                                      Type:       string
                                    Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                    Type:                     object
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                              Storage Class Name:
                                Description:  storageClassName is the name of the StorageClass required by the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                                Type:  string
                              Volume Attributes Class Name:
                                Description:  volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
If specified, the CSI driver will create or update the volume with the attributes defined
in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
will be set by the persistentvolume controller if it exists.
If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
exists.
More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
                                Type:  string
                              Volume Mode:
                                Description:  volumeMode defines what type of volume is required by the claim.
Value of Filesystem is implied when not included in claim spec.
                                Type:  string
                              Volume Name:
                                Description:  volumeName is the binding reference to the PersistentVolume backing this claim.
                                Type:         string
                            Type:             object
                        Type:                 object
                      Type:                   array
                  Required:
                    name
                  Type:     object
                Min Items:  1
                Type:       array
              Pod Disruption Budget:
                Description:  PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
                Properties:
                  Metadata:
                    Description:  ObjectMeta is the metadata of the PDB.
The name and namespace provided here are managed by ECK and will be ignored.
                    Properties:
                      Annotations:
                        Additional Properties:
                          Type:  string
                        Type:    object
                      Finalizers:
                        Items:
                          Type:  string
                        Type:    array
                      Labels:
                        Additional Properties:
                          Type:  string
                        Type:    object
                      Name:
                        Type:  string
                      Namespace:
                        Type:  string
                    Type:      object
                  Spec:
                    Description:  Spec is the specification of the PDB.
                    Properties:
                      Max Unavailable:
                        Any Of:
                          Type:       integer
                          Type:       string
                        Description:  An eviction is allowed if at most "maxUnavailable" pods selected by
"selector" are unavailable after the eviction, i.e. even in absence of
the evicted pod. For example, one can prevent all voluntary evictions
by specifying 0. This is a mutually exclusive setting with "minAvailable".
                        X - Kubernetes - Int - Or - String:  true
                      Min Available:
                        Any Of:
                          Type:       integer
                          Type:       string
                        Description:  An eviction is allowed if at least "minAvailable" pods selected by
"selector" will still be available after the eviction, i.e. even in the
absence of the evicted pod.  So for example you can prevent all voluntary
evictions by specifying "100%".
                        X - Kubernetes - Int - Or - String:  true
                      Selector:
                        Description:  Label query over pods whose evictions are managed by the disruption
budget.
A null selector will match no pods, while an empty ({}) selector will select
all pods within the namespace.
                        Properties:
                          Match Expressions:
                            Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                            Items:
                              Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                              Properties:
                                Key:
                                  Description:  key is the label key that the selector applies to.
                                  Type:         string
                                Operator:
                                  Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                  Type:  string
                                Values:
                                  Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                  Items:
                                    Type:                        string
                                  Type:                          array
                                  X - Kubernetes - List - Type:  atomic
                              Required:
                                key
                                operator
                              Type:                        object
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          Match Labels:
                            Additional Properties:
                              Type:       string
                            Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                            Type:                     object
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Unhealthy Pod Eviction Policy:
                        Description:  UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
should be considered for eviction. Current implementation considers healthy pods,
as pods that have status.conditions item with type="Ready",status="True".

Valid policies are IfHealthyBudget and AlwaysAllow.
If no policy is specified, the default behavior will be used,
which corresponds to the IfHealthyBudget policy.

IfHealthyBudget policy means that running pods (status.phase="Running"),
but not yet healthy can be evicted only if the guarded application is not
disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
Healthy pods will be subject to the PDB for eviction.

AlwaysAllow policy means that all running pods (status.phase="Running"),
but not yet healthy are considered disrupted and can be evicted regardless
of whether the criteria in a PDB is met. This means perspective running
pods of a disrupted application might not get a chance to become healthy.
Healthy pods will be subject to the PDB for eviction.

Additional policies may be added in the future.
Clients making eviction decisions should disallow eviction of unhealthy pods
if they encounter an unrecognized policy in this field.

This field is beta-level. The eviction API uses this field when
the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
                        Type:  string
                    Type:      object
                Type:          object
              Remote Cluster Server:
                Description:  RemoteClusterServer specifies if the remote cluster server should be enabled.
This must be enabled if this cluster is a remote cluster which is expected to be accessed using API key authentication.
                Properties:
                  Enabled:
                    Type:  boolean
                Type:      object
              Remote Clusters:
                Description:  RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
                Items:
                  Description:  RemoteCluster declares a remote Elasticsearch cluster connection.
                  Properties:
                    API Key:
                      Description:  APIKey can be used to enable remote cluster access using Cross-Cluster API keys: https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-create-cross-cluster-api-key.html
                      Properties:
                        Access:
                          Description:  Access is the name of the API Key. It is automatically generated if not set or empty.
                          Properties:
                            Replication:
                              Properties:
                                Names:
                                  Items:
                                    Type:  string
                                  Type:    array
                              Required:
                                names
                              Type:  object
                            Search:
                              Properties:
                                allow_restricted_indices:
                                  Type:  boolean
                                field_security:
                                  Properties:
                                    Except:
                                      Items:
                                        Type:  string
                                      Type:    array
                                    Grant:
                                      Items:
                                        Type:  string
                                      Type:    array
                                  Required:
                                    except
                                    grant
                                  Type:  object
                                Names:
                                  Items:
                                    Type:  string
                                  Type:    array
                                Query:
                                  Type:                                          object
                                  X - Kubernetes - Preserve - Unknown - Fields:  true
                              Required:
                                names
                              Type:  object
                          Type:      object
                      Required:
                        access
                      Type:  object
                    Elasticsearch Ref:
                      Description:  ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
                      Properties:
                        Name:
                          Description:  Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
                          Type:         string
                        Namespace:
                          Description:  Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                          Type:         string
                        Service Name:
                          Description:  ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
the referenced resource is used.
                          Type:  string
                      Type:      object
                    Name:
                      Description:  Name is the name of the remote cluster as it is set in the Elasticsearch settings.
The name is expected to be unique for each remote clusters.
                      Min Length:  1
                      Type:        string
                  Required:
                    name
                  Type:  object
                Type:    array
              Revision History Limit:
                Description:  RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSets.
                Format:       int32
                Type:         integer
              Secure Settings:
                Description:  SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
                Items:
                  Description:  SecretSource defines a data source based on a Kubernetes Secret.
                  Properties:
                    Entries:
                      Description:  Entries define how to project each key-value pair in the secret to filesystem paths.
If not defined, all keys will be projected to similarly named paths in the filesystem.
If defined, only the specified keys will be projected to the corresponding paths.
                      Items:
                        Description:  KeyToPath defines how to map a key in a Secret object to a filesystem path.
                        Properties:
                          Key:
                            Description:  Key is the key contained in the secret.
                            Type:         string
                          Path:
                            Description:  Path is the relative file path to map the key to.
Path must not be an absolute file path and must not contain any ".." components.
                            Type:  string
                        Required:
                          key
                        Type:  object
                      Type:    array
                    Secret Name:
                      Description:  SecretName is the name of the secret.
                      Type:         string
                  Required:
                    secretName
                  Type:  object
                Type:    array
              Service Account Name:
                Description:  ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace.
Can only be used if ECK is enforcing RBAC on references.
                Type:  string
              Transport:
                Description:  Transport holds transport layer settings for Elasticsearch.
                Properties:
                  Service:
                    Description:  Service defines the template for the associated Kubernetes Service object.
                    Properties:
                      Metadata:
                        Description:  ObjectMeta is the metadata of the service.
The name and namespace provided here are managed by ECK and will be ignored.
                        Properties:
                          Annotations:
                            Additional Properties:
                              Type:  string
                            Type:    object
                          Finalizers:
                            Items:
                              Type:  string
                            Type:    array
                          Labels:
                            Additional Properties:
                              Type:  string
                            Type:    object
                          Name:
                            Type:  string
                          Namespace:
                            Type:  string
                        Type:      object
                      Spec:
                        Description:  Spec is the specification of the service.
                        Properties:
                          Allocate Load Balancer Node Ports:
                            Description:  allocateLoadBalancerNodePorts defines if NodePorts will be automatically
allocated for services with type LoadBalancer.  Default is "true". It
may be set to "false" if the cluster load-balancer does not rely on
NodePorts.  If the caller requests specific NodePorts (by specifying a
value), those requests will be respected, regardless of this field.
This field may only be set for services with type LoadBalancer and will
be cleared if the type is changed to any other type.
                            Type:  boolean
                          Cluster IP:
                            Description:  clusterIP is the IP address of the service and is usually assigned
randomly. If an address is specified manually, is in-range (as per
system configuration), and is not in use, it will be allocated to the
service; otherwise creation of the service will fail. This field may not
be changed through updates unless the type field is also being changed
to ExternalName (which requires this field to be blank) or the type
field is being changed from ExternalName (in which case this field may
optionally be specified, as describe above).  Valid values are "None",
empty string (""), or a valid IP address. Setting this to "None" makes a
"headless service" (no virtual IP), which is useful when direct endpoint
connections are preferred and proxying is not required.  Only applies to
types ClusterIP, NodePort, and LoadBalancer. If this field is specified
when creating a Service of type ExternalName, creation will fail. This
field will be wiped when updating a Service to type ExternalName.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                            Type:  string
                          Cluster I Ps:
                            Description:  ClusterIPs is a list of IP addresses assigned to this service, and are
usually assigned randomly.  If an address is specified manually, is
in-range (as per system configuration), and is not in use, it will be
allocated to the service; otherwise creation of the service will fail.
This field may not be changed through updates unless the type field is
also being changed to ExternalName (which requires this field to be
empty) or the type field is being changed from ExternalName (in which
case this field may optionally be specified, as describe above).  Valid
values are "None", empty string (""), or a valid IP address.  Setting
this to "None" makes a "headless service" (no virtual IP), which is
useful when direct endpoint connections are preferred and proxying is
not required.  Only applies to types ClusterIP, NodePort, and
LoadBalancer. If this field is specified when creating a Service of type
ExternalName, creation will fail. This field will be wiped when updating
a Service to type ExternalName.  If this field is not specified, it will
be initialized from the clusterIP field.  If this field is specified,
clients must ensure that clusterIPs[0] and clusterIP have the same
value.

This field may hold a maximum of two entries (dual-stack IPs, in either order).
These IPs must correspond to the values of the ipFamilies field. Both
clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                            Items:
                              Type:                        string
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          External I Ps:
                            Description:  externalIPs is a list of IP addresses for which nodes in the cluster
will also accept traffic for this service.  These IPs are not managed by
Kubernetes.  The user is responsible for ensuring that traffic arrives
at a node with this IP.  A common example is external load-balancers
that are not part of the Kubernetes system.
                            Items:
                              Type:                        string
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          External Name:
                            Description:  externalName is the external reference that discovery mechanisms will
return as an alias for this service (e.g. a DNS CNAME record). No
proxying will be involved.  Must be a lowercase RFC-1123 hostname
(https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                            Type:  string
                          External Traffic Policy:
                            Description:  externalTrafficPolicy describes how nodes distribute service traffic they
receive on one of the Service's "externally-facing" addresses (NodePorts,
ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
the service in a way that assumes that external load balancers will take care
of balancing the service traffic between nodes, and so each node will deliver
traffic only to the node-local endpoints of the service, without masquerading
the client source IP. (Traffic mistakenly sent to a node with no endpoints will
be dropped.) The default value, "Cluster", uses the standard behavior of
routing to all endpoints evenly (possibly modified by topology and other
features). Note that traffic sent to an External IP or LoadBalancer IP from
within the cluster will always get "Cluster" semantics, but clients sending to
a NodePort from within the cluster may need to take traffic policy into account
when picking a node.
                            Type:  string
                          Health Check Node Port:
                            Description:  healthCheckNodePort specifies the healthcheck nodePort for the service.
This only applies when type is set to LoadBalancer and
externalTrafficPolicy is set to Local. If a value is specified, is
in-range, and is not in use, it will be used.  If not specified, a value
will be automatically allocated.  External systems (e.g. load-balancers)
can use this port to determine if a given node holds endpoints for this
service or not.  If this field is specified when creating a Service
which does not need it, creation will fail. This field will be wiped
when updating a Service to no longer need it (e.g. changing type).
This field cannot be updated once set.
                            Format:  int32
                            Type:    integer
                          Internal Traffic Policy:
                            Description:  InternalTrafficPolicy describes how nodes distribute service traffic they
receive on the ClusterIP. If set to "Local", the proxy will assume that pods
only want to talk to endpoints of the service on the same node as the pod,
dropping the traffic if there are no local endpoints. The default value,
"Cluster", uses the standard behavior of routing to all endpoints evenly
(possibly modified by topology and other features).
                            Type:  string
                          Ip Families:
                            Description:  IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
service. This field is usually assigned automatically based on cluster
configuration and the ipFamilyPolicy field. If this field is specified
manually, the requested family is available in the cluster,
and ipFamilyPolicy allows it, it will be used; otherwise creation of
the service will fail. This field is conditionally mutable: it allows
for adding or removing a secondary IP family, but it does not allow
changing the primary IP family of the Service. Valid values are "IPv4"
and "IPv6".  This field only applies to Services of types ClusterIP,
NodePort, and LoadBalancer, and does apply to "headless" services.
This field will be wiped when updating a Service to type ExternalName.

This field may hold a maximum of two entries (dual-stack families, in
either order).  These families must correspond to the values of the
clusterIPs field, if specified. Both clusterIPs and ipFamilies are
governed by the ipFamilyPolicy field.
                            Items:
                              Description:  IPFamily represents the IP Family (IPv4 or IPv6). This type is used
to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                              Type:                        string
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          Ip Family Policy:
                            Description:  IPFamilyPolicy represents the dual-stack-ness requested or required by
this Service. If there is no value provided, then this field will be set
to SingleStack. Services can be "SingleStack" (a single IP family),
"PreferDualStack" (two IP families on dual-stack configured clusters or
a single IP family on single-stack clusters), or "RequireDualStack"
(two IP families on dual-stack configured clusters, otherwise fail). The
ipFamilies and clusterIPs fields depend on the value of this field. This
field will be wiped when updating a service to type ExternalName.
                            Type:  string
                          Load Balancer Class:
                            Description:  loadBalancerClass is the class of the load balancer implementation this Service belongs to.
If specified, the value of this field must be a label-style identifier, with an optional prefix,
e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
balancer implementation is used, today this is typically done through the cloud provider integration,
but should apply for any default implementation. If set, it is assumed that a load balancer
implementation is watching for Services with a matching class. Any default load balancer
implementation (e.g. cloud providers) should ignore Services that set this field.
This field can only be set when creating or updating a Service to type 'LoadBalancer'.
Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                            Type:  string
                          Load Balancer IP:
                            Description:  Only applies to Service Type: LoadBalancer.
This feature depends on whether the underlying cloud-provider supports specifying
the loadBalancerIP when a load balancer is created.
This field will be ignored if the cloud-provider does not support the feature.
Deprecated: This field was under-specified and its meaning varies across implementations.
Using it is non-portable and it may not support dual-stack.
Users are encouraged to use implementation-specific annotations when available.
                            Type:  string
                          Load Balancer Source Ranges:
                            Description:  If specified and supported by the platform, this will restrict traffic through the cloud-provider
load-balancer will be restricted to the specified client IPs. This field will be ignored if the
cloud-provider does not support the feature."
More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
                            Items:
                              Type:                        string
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          Ports:
                            Description:  The list of ports that are exposed by this service.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                            Items:
                              Description:  ServicePort contains information on service's port.
                              Properties:
                                App Protocol:
                                  Description:  The application protocol for this port.
This is used as a hint for implementations to offer richer behavior for protocols that they understand.
This field follows standard Kubernetes label syntax.
Valid values are either:

* Un-prefixed protocol names - reserved for IANA standard service names (as per
RFC-6335 and https://www.iana.org/assignments/service-names).

* Kubernetes-defined prefixed names:
  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455

* Other protocols should use implementation-defined prefixed names such as
mycompany.com/my-custom-protocol.
                                  Type:  string
                                Name:
                                  Description:  The name of this port within the service. This must be a DNS_LABEL.
All ports within a ServiceSpec must have unique names. When considering
the endpoints for a Service, this must match the 'name' field in the
EndpointPort.
Optional if only one ServicePort is defined on this service.
                                  Type:  string
                                Node Port:
                                  Description:  The port on each node on which this service is exposed when type is
NodePort or LoadBalancer.  Usually assigned by the system. If a value is
specified, in-range, and not in use it will be used, otherwise the
operation will fail.  If not specified, a port will be allocated if this
Service requires one.  If this field is specified when creating a
Service which does not need it, creation will fail. This field will be
wiped when updating a Service to no longer need it (e.g. changing type
from NodePort to ClusterIP).
More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                                  Format:  int32
                                  Type:    integer
                                Port:
                                  Description:  The port that will be exposed by this service.
                                  Format:       int32
                                  Type:         integer
                                Protocol:
                                  Default:      TCP
                                  Description:  The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
Default is TCP.
                                  Type:  string
                                Target Port:
                                  Any Of:
                                    Type:       integer
                                    Type:       string
                                  Description:  Number or name of the port to access on the pods targeted by the service.
Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
If this is a string, it will be looked up as a named port in the
target Pod's container ports. If this is not specified, the value
of the 'port' field is used (an identity map).
This field is ignored for services with clusterIP=None, and should be
omitted or set equal to the 'port' field.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
                                  X - Kubernetes - Int - Or - String:  true
                              Required:
                                port
                              Type:  object
                            Type:    array
                            X - Kubernetes - List - Map - Keys:
                              port
                              protocol
                            X - Kubernetes - List - Type:  map
                          Publish Not Ready Addresses:
                            Description:  publishNotReadyAddresses indicates that any agent which deals with endpoints for this
Service should disregard any indications of ready/not-ready.
The primary use case for setting this field is for a StatefulSet's Headless Service to
propagate SRV DNS records for its Pods for the purpose of peer discovery.
The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
Services interpret this to mean that all endpoints are considered "ready" even if the
Pods themselves are not. Agents which consume only Kubernetes generated endpoints
through the Endpoints or EndpointSlice resources can safely assume this behavior.
                            Type:  boolean
                          Selector:
                            Additional Properties:
                              Type:       string
                            Description:  Route service traffic to pods with label keys and values matching this
selector. If empty or not present, the service is assumed to have an
external process managing its endpoints, which Kubernetes will not
modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
Ignored if type is ExternalName.
More info: https://kubernetes.io/docs/concepts/services-networking/service/
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Session Affinity:
                            Description:  Supports "ClientIP" and "None". Used to maintain session affinity.
Enable client IP based session affinity.
Must be ClientIP or None.
Defaults to None.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                            Type:  string
                          Session Affinity Config:
                            Description:  sessionAffinityConfig contains the configurations of session affinity.
                            Properties:
                              Client IP:
                                Description:  clientIP contains the configurations of Client IP based session affinity.
                                Properties:
                                  Timeout Seconds:
                                    Description:  timeoutSeconds specifies the seconds of ClientIP type session sticky time.
The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
Default value is 10800(for 3 hours).
                                    Format:  int32
                                    Type:    integer
                                Type:        object
                            Type:            object
                          Traffic Distribution:
                            Description:  TrafficDistribution offers a way to express preferences for how traffic is
distributed to Service endpoints. Implementations can use this field as a
hint, but are not required to guarantee strict adherence. If the field is
not set, the implementation will apply its default routing strategy. If set
to "PreferClose", implementations should prioritize endpoints that are
topologically close (e.g., same zone).
This is a beta field and requires enabling ServiceTrafficDistribution feature.
                            Type:  string
                          Type:
                            Description:  type determines how the Service is exposed. Defaults to ClusterIP. Valid
options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
"ClusterIP" allocates a cluster-internal IP address for load-balancing
to endpoints. Endpoints are determined by the selector or if that is not
specified, by manual construction of an Endpoints object or
EndpointSlice objects. If clusterIP is "None", no virtual IP is
allocated and the endpoints are published as a set of endpoints rather
than a virtual IP.
"NodePort" builds on ClusterIP and allocates a port on every node which
routes to the same endpoints as the clusterIP.
"LoadBalancer" builds on NodePort and creates an external load-balancer
(if supported in the current cloud) which routes to the same endpoints
as the clusterIP.
"ExternalName" aliases this service to the specified externalName.
Several other fields do not apply to ExternalName services.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
                            Type:  string
                        Type:      object
                    Type:          object
                  Tls:
                    Description:  TLS defines options for configuring TLS on the transport layer.
                    Properties:
                      Certificate:
                        Description:  Certificate is a reference to a Kubernetes secret that contains the CA certificate
and private key for generating node certificates.
The referenced secret should contain the following:

- `ca.crt`: The CA certificate in PEM format.
- `ca.key`: The private key for the CA certificate in PEM format.
                        Properties:
                          Secret Name:
                            Description:  SecretName is the name of the secret.
                            Type:         string
                        Type:             object
                      Certificate Authorities:
                        Description:  CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
                        Properties:
                          Config Map Name:
                            Type:  string
                        Type:      object
                      Other Name Suffix:
                        Description:  OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name,
and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name
extension of each Elasticsearch node's transport TLS certificate.
Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
                        Type:  string
                      Self Signed Certificates:
                        Description:  SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
                        Properties:
                          Disabled:
                            Description:  Disabled indicates that provisioning of the self-signed certificates should be disabled.
                            Type:         boolean
                        Type:             object
                      Subject Alt Names:
                        Description:  SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
                        Items:
                          Description:  SubjectAlternativeName represents a SAN entry in a x509 certificate.
                          Properties:
                            Dns:
                              Description:  DNS is the DNS name of the subject.
                              Type:         string
                            Ip:
                              Description:  IP is the IP address of the subject.
                              Type:         string
                          Type:             object
                        Type:               array
                    Type:                   object
                Type:                       object
              Update Strategy:
                Description:  UpdateStrategy specifies how updates to the cluster should be performed.
                Properties:
                  Change Budget:
                    Description:  ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
                    Properties:
                      Max Surge:
                        Description:  MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in
the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
disable the restriction. Defaults to unbounded if not specified.
                        Format:  int32
                        Type:    integer
                      Max Unavailable:
                        Description:  MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to
circumstances under the control of the operator. Setting a negative value will disable this restriction.
Defaults to 1 if not specified.
                        Format:  int32
                        Type:    integer
                    Type:        object
                Type:            object
              Version:
                Description:  Version of Elasticsearch.
                Type:         string
              Volume Claim Delete Policy:
                Description:  VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets.
Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
                Enum:
                  DeleteOnScaledownOnly
                  DeleteOnScaledownAndClusterDeletion
                Type:  string
            Required:
              nodeSets
              version
            Type:  object
          Status:
            Description:  ElasticsearchStatus represents the observed state of Elasticsearch.
            Properties:
              Available Nodes:
                Description:  AvailableNodes is the number of available instances.
                Format:       int32
                Type:         integer
              Conditions:
                Description:  Conditions holds the current service state of an Elasticsearch cluster.
**This API is in technical preview and may be changed or removed in a future release.**
                Items:
                  Description:  Condition represents Elasticsearch resource's condition.
**This API is in technical preview and may be changed or removed in a future release.**
                  Properties:
                    Last Transition Time:
                      Format:  date-time
                      Type:    string
                    Message:
                      Type:  string
                    Status:
                      Type:  string
                    Type:
                      Description:  ConditionType defines the condition of an Elasticsearch resource.
                      Type:         string
                  Required:
                    status
                    type
                  Type:  object
                Type:    array
              Health:
                Description:  ElasticsearchHealth is the health of the cluster as returned by the health API.
                Type:         string
              In Progress Operations:
                Description:  InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
**This API is in technical preview and may be changed or removed in a future release.**
                Properties:
                  Downscale:
                    Description:  DownscaleOperation provides details about in progress downscale operations.
**This API is in technical preview and may be changed or removed in a future release.**
                    Properties:
                      Last Updated Time:
                        Format:  date-time
                        Type:    string
                      Nodes:
                        Description:  Nodes which are scheduled to be removed from the cluster.
                        Items:
                          Description:  DownscaledNode provides an overview of in progress changes applied by the operator to remove Elasticsearch nodes from the cluster.
**This API is in technical preview and may be changed or removed in a future release.**
                          Properties:
                            Explanation:
                              Description:  Explanation provides details about an in progress node shutdown. It is only available for clusters managed with the
Elasticsearch shutdown API.
                              Type:  string
                            Name:
                              Description:  Name of the Elasticsearch node that should be removed.
                              Type:         string
                            Shutdown Status:
                              Description:  Shutdown status as returned by the Elasticsearch shutdown API.
If the Elasticsearch shutdown API is not available, the shutdown status is then inferred from the remaining
shards on the nodes, as observed by the operator.
                              Type:  string
                          Required:
                            name
                            shutdownStatus
                          Type:  object
                        Type:    array
                      Stalled:
                        Description:  Stalled represents a state where no progress can be made.
It is only available for clusters managed with the Elasticsearch shutdown API.
                        Type:  boolean
                    Type:      object
                  Upgrade:
                    Description:  UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
**This API is in technical preview and may be changed or removed in a future release.**
                    Properties:
                      Last Updated Time:
                        Format:  date-time
                        Type:    string
                      Nodes:
                        Description:  Nodes that must be restarted for upgrade.
                        Items:
                          Description:  UpgradedNode provides details about the status of nodes which are expected to be updated.
**This API is in technical preview and may be changed or removed in a future release.**
                          Properties:
                            Message:
                              Description:  Optional message to explain why a node may not be immediately restarted for upgrade.
                              Type:         string
                            Name:
                              Description:  Name of the Elasticsearch node that should be upgraded.
                              Type:         string
                            Predicate:
                              Description:  Predicate is the name of the predicate currently preventing this node from being deleted for an upgrade.
                              Type:         string
                            Status:
                              Description:  Status states if the node is either in the process of being deleted for an upgrade,
or blocked by a predicate or another condition stated in the message field.
                              Type:  string
                          Required:
                            name
                            status
                          Type:  object
                        Type:    array
                    Type:        object
                  Upscale:
                    Description:  UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
**This API is in technical preview and may be changed or removed in a future release.**
                    Properties:
                      Last Updated Time:
                        Format:  date-time
                        Type:    string
                      Nodes:
                        Description:  Nodes expected to be added by the operator.
                        Items:
                          Properties:
                            Message:
                              Description:  Optional message to explain why a node may not be immediately added.
                              Type:         string
                            Name:
                              Description:  Name of the Elasticsearch node that should be added to the cluster.
                              Type:         string
                            Status:
                              Description:  NewNodeStatus states if a new node is being created, or if the upscale is delayed.
                              Type:         string
                          Required:
                            name
                            status
                          Type:  object
                        Type:    array
                    Type:        object
                Required:
                  downscale
                  upgrade
                  upscale
                Type:  object
              Monitoring Association Status:
                Additional Properties:
                  Description:  AssociationStatus is the status of an association resource.
                  Type:         string
                Description:    AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
                Type:  object
              Observed Generation:
                Description:  ObservedGeneration is the most recent generation observed for this Elasticsearch cluster.
It corresponds to the metadata generation, which is updated on mutation by the API Server.
If the generation observed in status diverges from the generation in metadata, the Elasticsearch
controller has not yet processed the changes contained in the Elasticsearch specification.
                Format:  int64
                Type:    integer
              Phase:
                Description:  ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
                Type:         string
              Version:
                Description:  Version of the stack resource currently running. During version upgrades, multiple versions may run
in parallel: this value specifies the lowest version currently running.
                Type:  string
            Type:      object
        Type:          object
    Served:            true
    Storage:           true
    Subresources:
      Status:
    Additional Printer Columns:
      Json Path:    .status.health
      Name:         health
      Type:         string
      Description:  Available nodes
      Json Path:    .status.availableNodes
      Name:         nodes
      Type:         integer
      Description:  Elasticsearch version
      Json Path:    .spec.version
      Name:         version
      Type:         string
      Json Path:    .status.phase
      Name:         phase
      Type:         string
      Json Path:    .metadata.creationTimestamp
      Name:         age
      Type:         date
    Name:           v1beta1
    Schema:
      openAPIV3Schema:
        Description:  Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
        Properties:
          API Version:
            Description:  APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            Type:  string
          Kind:
            Description:  Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            Type:  string
          Metadata:
            Type:  object
          Spec:
            Description:  ElasticsearchSpec holds the specification of an Elasticsearch cluster.
            Properties:
              Http:
                Description:  HTTP holds HTTP layer settings for Elasticsearch.
                Properties:
                  Service:
                    Description:  Service defines the template for the associated Kubernetes Service object.
                    Properties:
                      Metadata:
                        Description:  ObjectMeta is the metadata of the service.
The name and namespace provided here are managed by ECK and will be ignored.
                        Properties:
                          Annotations:
                            Additional Properties:
                              Type:  string
                            Type:    object
                          Finalizers:
                            Items:
                              Type:  string
                            Type:    array
                          Labels:
                            Additional Properties:
                              Type:  string
                            Type:    object
                          Name:
                            Type:  string
                          Namespace:
                            Type:  string
                        Type:      object
                      Spec:
                        Description:  Spec is the specification of the service.
                        Properties:
                          Allocate Load Balancer Node Ports:
                            Description:  allocateLoadBalancerNodePorts defines if NodePorts will be automatically
allocated for services with type LoadBalancer.  Default is "true". It
may be set to "false" if the cluster load-balancer does not rely on
NodePorts.  If the caller requests specific NodePorts (by specifying a
value), those requests will be respected, regardless of this field.
This field may only be set for services with type LoadBalancer and will
be cleared if the type is changed to any other type.
                            Type:  boolean
                          Cluster IP:
                            Description:  clusterIP is the IP address of the service and is usually assigned
randomly. If an address is specified manually, is in-range (as per
system configuration), and is not in use, it will be allocated to the
service; otherwise creation of the service will fail. This field may not
be changed through updates unless the type field is also being changed
to ExternalName (which requires this field to be blank) or the type
field is being changed from ExternalName (in which case this field may
optionally be specified, as describe above).  Valid values are "None",
empty string (""), or a valid IP address. Setting this to "None" makes a
"headless service" (no virtual IP), which is useful when direct endpoint
connections are preferred and proxying is not required.  Only applies to
types ClusterIP, NodePort, and LoadBalancer. If this field is specified
when creating a Service of type ExternalName, creation will fail. This
field will be wiped when updating a Service to type ExternalName.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                            Type:  string
                          Cluster I Ps:
                            Description:  ClusterIPs is a list of IP addresses assigned to this service, and are
usually assigned randomly.  If an address is specified manually, is
in-range (as per system configuration), and is not in use, it will be
allocated to the service; otherwise creation of the service will fail.
This field may not be changed through updates unless the type field is
also being changed to ExternalName (which requires this field to be
empty) or the type field is being changed from ExternalName (in which
case this field may optionally be specified, as describe above).  Valid
values are "None", empty string (""), or a valid IP address.  Setting
this to "None" makes a "headless service" (no virtual IP), which is
useful when direct endpoint connections are preferred and proxying is
not required.  Only applies to types ClusterIP, NodePort, and
LoadBalancer. If this field is specified when creating a Service of type
ExternalName, creation will fail. This field will be wiped when updating
a Service to type ExternalName.  If this field is not specified, it will
be initialized from the clusterIP field.  If this field is specified,
clients must ensure that clusterIPs[0] and clusterIP have the same
value.

This field may hold a maximum of two entries (dual-stack IPs, in either order).
These IPs must correspond to the values of the ipFamilies field. Both
clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                            Items:
                              Type:                        string
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          External I Ps:
                            Description:  externalIPs is a list of IP addresses for which nodes in the cluster
will also accept traffic for this service.  These IPs are not managed by
Kubernetes.  The user is responsible for ensuring that traffic arrives
at a node with this IP.  A common example is external load-balancers
that are not part of the Kubernetes system.
                            Items:
                              Type:                        string
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          External Name:
                            Description:  externalName is the external reference that discovery mechanisms will
return as an alias for this service (e.g. a DNS CNAME record). No
proxying will be involved.  Must be a lowercase RFC-1123 hostname
(https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                            Type:  string
                          External Traffic Policy:
                            Description:  externalTrafficPolicy describes how nodes distribute service traffic they
receive on one of the Service's "externally-facing" addresses (NodePorts,
ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
the service in a way that assumes that external load balancers will take care
of balancing the service traffic between nodes, and so each node will deliver
traffic only to the node-local endpoints of the service, without masquerading
the client source IP. (Traffic mistakenly sent to a node with no endpoints will
be dropped.) The default value, "Cluster", uses the standard behavior of
routing to all endpoints evenly (possibly modified by topology and other
features). Note that traffic sent to an External IP or LoadBalancer IP from
within the cluster will always get "Cluster" semantics, but clients sending to
a NodePort from within the cluster may need to take traffic policy into account
when picking a node.
                            Type:  string
                          Health Check Node Port:
                            Description:  healthCheckNodePort specifies the healthcheck nodePort for the service.
This only applies when type is set to LoadBalancer and
externalTrafficPolicy is set to Local. If a value is specified, is
in-range, and is not in use, it will be used.  If not specified, a value
will be automatically allocated.  External systems (e.g. load-balancers)
can use this port to determine if a given node holds endpoints for this
service or not.  If this field is specified when creating a Service
which does not need it, creation will fail. This field will be wiped
when updating a Service to no longer need it (e.g. changing type).
This field cannot be updated once set.
                            Format:  int32
                            Type:    integer
                          Internal Traffic Policy:
                            Description:  InternalTrafficPolicy describes how nodes distribute service traffic they
receive on the ClusterIP. If set to "Local", the proxy will assume that pods
only want to talk to endpoints of the service on the same node as the pod,
dropping the traffic if there are no local endpoints. The default value,
"Cluster", uses the standard behavior of routing to all endpoints evenly
(possibly modified by topology and other features).
                            Type:  string
                          Ip Families:
                            Description:  IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
service. This field is usually assigned automatically based on cluster
configuration and the ipFamilyPolicy field. If this field is specified
manually, the requested family is available in the cluster,
and ipFamilyPolicy allows it, it will be used; otherwise creation of
the service will fail. This field is conditionally mutable: it allows
for adding or removing a secondary IP family, but it does not allow
changing the primary IP family of the Service. Valid values are "IPv4"
and "IPv6".  This field only applies to Services of types ClusterIP,
NodePort, and LoadBalancer, and does apply to "headless" services.
This field will be wiped when updating a Service to type ExternalName.

This field may hold a maximum of two entries (dual-stack families, in
either order).  These families must correspond to the values of the
clusterIPs field, if specified. Both clusterIPs and ipFamilies are
governed by the ipFamilyPolicy field.
                            Items:
                              Description:  IPFamily represents the IP Family (IPv4 or IPv6). This type is used
to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                              Type:                        string
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          Ip Family Policy:
                            Description:  IPFamilyPolicy represents the dual-stack-ness requested or required by
this Service. If there is no value provided, then this field will be set
to SingleStack. Services can be "SingleStack" (a single IP family),
"PreferDualStack" (two IP families on dual-stack configured clusters or
a single IP family on single-stack clusters), or "RequireDualStack"
(two IP families on dual-stack configured clusters, otherwise fail). The
ipFamilies and clusterIPs fields depend on the value of this field. This
field will be wiped when updating a service to type ExternalName.
                            Type:  string
                          Load Balancer Class:
                            Description:  loadBalancerClass is the class of the load balancer implementation this Service belongs to.
If specified, the value of this field must be a label-style identifier, with an optional prefix,
e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
balancer implementation is used, today this is typically done through the cloud provider integration,
but should apply for any default implementation. If set, it is assumed that a load balancer
implementation is watching for Services with a matching class. Any default load balancer
implementation (e.g. cloud providers) should ignore Services that set this field.
This field can only be set when creating or updating a Service to type 'LoadBalancer'.
Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                            Type:  string
                          Load Balancer IP:
                            Description:  Only applies to Service Type: LoadBalancer.
This feature depends on whether the underlying cloud-provider supports specifying
the loadBalancerIP when a load balancer is created.
This field will be ignored if the cloud-provider does not support the feature.
Deprecated: This field was under-specified and its meaning varies across implementations.
Using it is non-portable and it may not support dual-stack.
Users are encouraged to use implementation-specific annotations when available.
                            Type:  string
                          Load Balancer Source Ranges:
                            Description:  If specified and supported by the platform, this will restrict traffic through the cloud-provider
load-balancer will be restricted to the specified client IPs. This field will be ignored if the
cloud-provider does not support the feature."
More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
                            Items:
                              Type:                        string
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          Ports:
                            Description:  The list of ports that are exposed by this service.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                            Items:
                              Description:  ServicePort contains information on service's port.
                              Properties:
                                App Protocol:
                                  Description:  The application protocol for this port.
This is used as a hint for implementations to offer richer behavior for protocols that they understand.
This field follows standard Kubernetes label syntax.
Valid values are either:

* Un-prefixed protocol names - reserved for IANA standard service names (as per
RFC-6335 and https://www.iana.org/assignments/service-names).

* Kubernetes-defined prefixed names:
  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455

* Other protocols should use implementation-defined prefixed names such as
mycompany.com/my-custom-protocol.
                                  Type:  string
                                Name:
                                  Description:  The name of this port within the service. This must be a DNS_LABEL.
All ports within a ServiceSpec must have unique names. When considering
the endpoints for a Service, this must match the 'name' field in the
EndpointPort.
Optional if only one ServicePort is defined on this service.
                                  Type:  string
                                Node Port:
                                  Description:  The port on each node on which this service is exposed when type is
NodePort or LoadBalancer.  Usually assigned by the system. If a value is
specified, in-range, and not in use it will be used, otherwise the
operation will fail.  If not specified, a port will be allocated if this
Service requires one.  If this field is specified when creating a
Service which does not need it, creation will fail. This field will be
wiped when updating a Service to no longer need it (e.g. changing type
from NodePort to ClusterIP).
More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                                  Format:  int32
                                  Type:    integer
                                Port:
                                  Description:  The port that will be exposed by this service.
                                  Format:       int32
                                  Type:         integer
                                Protocol:
                                  Default:      TCP
                                  Description:  The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
Default is TCP.
                                  Type:  string
                                Target Port:
                                  Any Of:
                                    Type:       integer
                                    Type:       string
                                  Description:  Number or name of the port to access on the pods targeted by the service.
Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
If this is a string, it will be looked up as a named port in the
target Pod's container ports. If this is not specified, the value
of the 'port' field is used (an identity map).
This field is ignored for services with clusterIP=None, and should be
omitted or set equal to the 'port' field.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
                                  X - Kubernetes - Int - Or - String:  true
                              Required:
                                port
                              Type:  object
                            Type:    array
                            X - Kubernetes - List - Map - Keys:
                              port
                              protocol
                            X - Kubernetes - List - Type:  map
                          Publish Not Ready Addresses:
                            Description:  publishNotReadyAddresses indicates that any agent which deals with endpoints for this
Service should disregard any indications of ready/not-ready.
The primary use case for setting this field is for a StatefulSet's Headless Service to
propagate SRV DNS records for its Pods for the purpose of peer discovery.
The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
Services interpret this to mean that all endpoints are considered "ready" even if the
Pods themselves are not. Agents which consume only Kubernetes generated endpoints
through the Endpoints or EndpointSlice resources can safely assume this behavior.
                            Type:  boolean
                          Selector:
                            Additional Properties:
                              Type:       string
                            Description:  Route service traffic to pods with label keys and values matching this
selector. If empty or not present, the service is assumed to have an
external process managing its endpoints, which Kubernetes will not
modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
Ignored if type is ExternalName.
More info: https://kubernetes.io/docs/concepts/services-networking/service/
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Session Affinity:
                            Description:  Supports "ClientIP" and "None". Used to maintain session affinity.
Enable client IP based session affinity.
Must be ClientIP or None.
Defaults to None.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                            Type:  string
                          Session Affinity Config:
                            Description:  sessionAffinityConfig contains the configurations of session affinity.
                            Properties:
                              Client IP:
                                Description:  clientIP contains the configurations of Client IP based session affinity.
                                Properties:
                                  Timeout Seconds:
                                    Description:  timeoutSeconds specifies the seconds of ClientIP type session sticky time.
The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
Default value is 10800(for 3 hours).
                                    Format:  int32
                                    Type:    integer
                                Type:        object
                            Type:            object
                          Traffic Distribution:
                            Description:  TrafficDistribution offers a way to express preferences for how traffic is
distributed to Service endpoints. Implementations can use this field as a
hint, but are not required to guarantee strict adherence. If the field is
not set, the implementation will apply its default routing strategy. If set
to "PreferClose", implementations should prioritize endpoints that are
topologically close (e.g., same zone).
This is a beta field and requires enabling ServiceTrafficDistribution feature.
                            Type:  string
                          Type:
                            Description:  type determines how the Service is exposed. Defaults to ClusterIP. Valid
options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
"ClusterIP" allocates a cluster-internal IP address for load-balancing
to endpoints. Endpoints are determined by the selector or if that is not
specified, by manual construction of an Endpoints object or
EndpointSlice objects. If clusterIP is "None", no virtual IP is
allocated and the endpoints are published as a set of endpoints rather
than a virtual IP.
"NodePort" builds on ClusterIP and allocates a port on every node which
routes to the same endpoints as the clusterIP.
"LoadBalancer" builds on NodePort and creates an external load-balancer
(if supported in the current cloud) which routes to the same endpoints
as the clusterIP.
"ExternalName" aliases this service to the specified externalName.
Several other fields do not apply to ExternalName services.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
                            Type:  string
                        Type:      object
                    Type:          object
                  Tls:
                    Description:  TLS defines options for configuring TLS for HTTP.
                    Properties:
                      Certificate:
                        Description:  Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
The referenced secret should contain the following:

- `ca.crt`: The certificate authority (optional).
- `tls.crt`: The certificate (or a chain).
- `tls.key`: The private key to the first certificate in the certificate chain.
                        Properties:
                          Secret Name:
                            Description:  SecretName is the name of the secret.
                            Type:         string
                        Type:             object
                      Self Signed Certificate:
                        Description:  SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
                        Properties:
                          Disabled:
                            Description:  Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
                            Type:         boolean
                          Subject Alt Names:
                            Description:  SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
                            Items:
                              Description:  SubjectAlternativeName represents a SAN entry in a x509 certificate.
                              Properties:
                                Dns:
                                  Description:  DNS is the DNS name of the subject.
                                  Type:         string
                                Ip:
                                  Description:  IP is the IP address of the subject.
                                  Type:         string
                              Type:             object
                            Type:               array
                        Type:                   object
                    Type:                       object
                Type:                           object
              Image:
                Description:  Image is the Elasticsearch Docker image to deploy.
                Type:         string
              Node Sets:
                Description:  NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
                Items:
                  Description:  NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
                  Properties:
                    Config:
                      Description:  Config holds the Elasticsearch configuration.
                      Type:         object
                    Count:
                      Description:  Count of Elasticsearch nodes to deploy.
                      Format:       int32
                      Minimum:      1
                      Type:         integer
                    Name:
                      Description:  Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
                      Max Length:   23
                      Pattern:      [a-zA-Z0-9-]+
                      Type:         string
                    Pod Template:
                      Description:  PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
                      Type:         object
                    Volume Claim Templates:
                      Description:  VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet.
Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate.
Items defined here take precedence over any default claims added by the operator with the same name.
                      Items:
                        Description:  PersistentVolumeClaim is a user's request for and claim to a persistent volume
                        Properties:
                          API Version:
                            Description:  APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                            Type:  string
                          Kind:
                            Description:  Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                            Type:  string
                          Metadata:
                            Description:  Standard object's metadata.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                            Properties:
                              Annotations:
                                Additional Properties:
                                  Type:  string
                                Type:    object
                              Finalizers:
                                Items:
                                  Type:  string
                                Type:    array
                              Labels:
                                Additional Properties:
                                  Type:  string
                                Type:    object
                              Name:
                                Type:  string
                              Namespace:
                                Type:  string
                            Type:      object
                          Spec:
                            Description:  spec defines the desired characteristics of a volume requested by a pod author.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                            Properties:
                              Access Modes:
                                Description:  accessModes contains the desired access modes the volume should have.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                                Items:
                                  Type:                        string
                                Type:                          array
                                X - Kubernetes - List - Type:  atomic
                              Data Source:
                                Description:  dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                                Properties:
                                  API Group:
                                    Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                    Type:  string
                                  Kind:
                                    Description:  Kind is the type of resource being referenced
                                    Type:         string
                                  Name:
                                    Description:  Name is the name of resource being referenced
                                    Type:         string
                                Required:
                                  kind
                                  name
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                              Data Source Ref:
                                Description:  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                Properties:
                                  API Group:
                                    Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                    Type:  string
                                  Kind:
                                    Description:  Kind is the type of resource being referenced
                                    Type:         string
                                  Name:
                                    Description:  Name is the name of resource being referenced
                                    Type:         string
                                  Namespace:
                                    Description:  Namespace is the namespace of resource being referenced
Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                    Type:  string
                                Required:
                                  kind
                                  name
                                Type:  object
                              Resources:
                                Description:  resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                                Properties:
                                  Limits:
                                    Additional Properties:
                                      Any Of:
                                        Type:                              integer
                                        Type:                              string
                                      Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      X - Kubernetes - Int - Or - String:  true
                                    Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                    Type:  object
                                  Requests:
                                    Additional Properties:
                                      Any Of:
                                        Type:                              integer
                                        Type:                              string
                                      Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      X - Kubernetes - Int - Or - String:  true
                                    Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                    Type:  object
                                Type:      object
                              Selector:
                                Description:  selector is a label query over volumes to consider for binding.
                                Properties:
                                  Match Expressions:
                                    Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                    Items:
                                      Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                      Properties:
                                        Key:
                                          Description:  key is the label key that the selector applies to.
                                          Type:         string
                                        Operator:
                                          Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                          Type:  string
                                        Values:
                                          Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                      Required:
                                        key
                                        operator
                                      Type:                        object
                                    Type:                          array
                                    X - Kubernetes - List - Type:  atomic
                                  Match Labels:
                                    Additional Properties:
                                      Type:       string
                                    Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                    Type:                     object
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                              Storage Class Name:
                                Description:  storageClassName is the name of the StorageClass required by the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                                Type:  string
                              Volume Attributes Class Name:
                                Description:  volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
If specified, the CSI driver will create or update the volume with the attributes defined
in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
will be set by the persistentvolume controller if it exists.
If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
exists.
More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
                                Type:  string
                              Volume Mode:
                                Description:  volumeMode defines what type of volume is required by the claim.
Value of Filesystem is implied when not included in claim spec.
                                Type:  string
                              Volume Name:
                                Description:  volumeName is the binding reference to the PersistentVolume backing this claim.
                                Type:         string
                            Type:             object
                        Type:                 object
                      Type:                   array
                  Required:
                    count
                    name
                  Type:     object
                Min Items:  1
                Type:       array
              Pod Disruption Budget:
                Description:  PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster.
The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget`
to the empty value (`{}` in YAML).
                Properties:
                  Metadata:
                    Description:  ObjectMeta is the metadata of the PDB.
The name and namespace provided here are managed by ECK and will be ignored.
                    Properties:
                      Annotations:
                        Additional Properties:
                          Type:  string
                        Type:    object
                      Finalizers:
                        Items:
                          Type:  string
                        Type:    array
                      Labels:
                        Additional Properties:
                          Type:  string
                        Type:    object
                      Name:
                        Type:  string
                      Namespace:
                        Type:  string
                    Type:      object
                  Spec:
                    Description:  Spec is the specification of the PDB.
                    Properties:
                      Max Unavailable:
                        Any Of:
                          Type:       integer
                          Type:       string
                        Description:  An eviction is allowed if at most "maxUnavailable" pods selected by
"selector" are unavailable after the eviction, i.e. even in absence of
the evicted pod. For example, one can prevent all voluntary evictions
by specifying 0. This is a mutually exclusive setting with "minAvailable".
                        X - Kubernetes - Int - Or - String:  true
                      Min Available:
                        Any Of:
                          Type:       integer
                          Type:       string
                        Description:  An eviction is allowed if at least "minAvailable" pods selected by
"selector" will still be available after the eviction, i.e. even in the
absence of the evicted pod.  So for example you can prevent all voluntary
evictions by specifying "100%".
                        X - Kubernetes - Int - Or - String:  true
                      Selector:
                        Description:  Label query over pods whose evictions are managed by the disruption
budget.
A null selector selects no pods.
An empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods.
In policy/v1, an empty selector will select all pods in the namespace.
                        Properties:
                          Match Expressions:
                            Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                            Items:
                              Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                              Properties:
                                Key:
                                  Description:  key is the label key that the selector applies to.
                                  Type:         string
                                Operator:
                                  Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                  Type:  string
                                Values:
                                  Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                  Items:
                                    Type:                        string
                                  Type:                          array
                                  X - Kubernetes - List - Type:  atomic
                              Required:
                                key
                                operator
                              Type:                        object
                            Type:                          array
                            X - Kubernetes - List - Type:  atomic
                          Match Labels:
                            Additional Properties:
                              Type:       string
                            Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                            Type:                     object
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Unhealthy Pod Eviction Policy:
                        Description:  UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
should be considered for eviction. Current implementation considers healthy pods,
as pods that have status.conditions item with type="Ready",status="True".

Valid policies are IfHealthyBudget and AlwaysAllow.
If no policy is specified, the default behavior will be used,
which corresponds to the IfHealthyBudget policy.

IfHealthyBudget policy means that running pods (status.phase="Running"),
but not yet healthy can be evicted only if the guarded application is not
disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
Healthy pods will be subject to the PDB for eviction.

AlwaysAllow policy means that all running pods (status.phase="Running"),
but not yet healthy are considered disrupted and can be evicted regardless
of whether the criteria in a PDB is met. This means perspective running
pods of a disrupted application might not get a chance to become healthy.
Healthy pods will be subject to the PDB for eviction.

Additional policies may be added in the future.
Clients making eviction decisions should disallow eviction of unhealthy pods
if they encounter an unrecognized policy in this field.

This field is beta-level. The eviction API uses this field when
the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
                        Type:  string
                    Type:      object
                Type:          object
              Secure Settings:
                Description:  SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
                Items:
                  Description:  SecretSource defines a data source based on a Kubernetes Secret.
                  Properties:
                    Entries:
                      Description:  Entries define how to project each key-value pair in the secret to filesystem paths.
If not defined, all keys will be projected to similarly named paths in the filesystem.
If defined, only the specified keys will be projected to the corresponding paths.
                      Items:
                        Description:  KeyToPath defines how to map a key in a Secret object to a filesystem path.
                        Properties:
                          Key:
                            Description:  Key is the key contained in the secret.
                            Type:         string
                          Path:
                            Description:  Path is the relative file path to map the key to.
Path must not be an absolute file path and must not contain any ".." components.
                            Type:  string
                        Required:
                          key
                        Type:  object
                      Type:    array
                    Secret Name:
                      Description:  SecretName is the name of the secret.
                      Type:         string
                  Required:
                    secretName
                  Type:  object
                Type:    array
              Update Strategy:
                Description:  UpdateStrategy specifies how updates to the cluster should be performed.
                Properties:
                  Change Budget:
                    Description:  ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
                    Properties:
                      Max Surge:
                        Description:  MaxSurge is the maximum number of new pods that can be created exceeding the original number of pods defined in
the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
disable the restriction. Defaults to unbounded if not specified.
                        Format:  int32
                        Type:    integer
                      Max Unavailable:
                        Description:  MaxUnavailable is the maximum number of pods that can be unavailable (not ready) during the update due to
circumstances under the control of the operator. Setting a negative value will disable this restriction.
Defaults to 1 if not specified.
                        Format:  int32
                        Type:    integer
                    Type:        object
                Type:            object
              Version:
                Description:  Version of Elasticsearch.
                Type:         string
            Required:
              nodeSets
            Type:  object
          Status:
            Description:  ElasticsearchStatus defines the observed state of Elasticsearch
            Properties:
              Available Nodes:
                Format:  int32
                Type:    integer
              Health:
                Description:  ElasticsearchHealth is the health of the cluster as returned by the health API.
                Type:         string
              Phase:
                Description:  ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
                Type:         string
            Type:             object
        Type:                 object
    Served:                   true
    Storage:                  false
    Subresources:
      Status:
    Name:  v1alpha1
    Schema:
      openAPIV3Schema:
        Description:  to not break compatibility when upgrading from previous versions of the CRD
        Type:         object
    Served:           false
    Storage:          false
Status:
  Accepted Names:
    Categories:
      elastic
    Kind:       Elasticsearch
    List Kind:  ElasticsearchList
    Plural:     elasticsearches
    Short Names:
      es
    Singular:  elasticsearch
  Conditions:
    Last Transition Time:  2025-05-07T13:27:20Z
    Message:               no conflicts found
    Reason:                NoConflicts
    Status:                True
    Type:                  NamesAccepted
    Last Transition Time:  2025-05-07T13:27:21Z
    Message:               the initial names have been accepted
    Reason:                InitialNamesAccepted
    Status:                True
    Type:                  Established
  Stored Versions:
    v1
Events:  <none>

