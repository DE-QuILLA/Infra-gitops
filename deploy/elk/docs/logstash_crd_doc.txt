Name:         logstashes.logstash.k8s.elastic.co
Namespace:    
Labels:       app.kubernetes.io/instance=elastic-operator
              app.kubernetes.io/managed-by=Helm
              app.kubernetes.io/name=eck-operator-crds
              app.kubernetes.io/version=3.0.0
              helm.sh/chart=eck-operator-crds-3.0.0
Annotations:  controller-gen.kubebuilder.io/version: v0.17.2
              helm.sh/resource-policy: keep
              meta.helm.sh/release-name: elastic-operator
              meta.helm.sh/release-namespace: elk-ns
API Version:  apiextensions.k8s.io/v1
Kind:         CustomResourceDefinition
Metadata:
  Creation Timestamp:  2025-05-07T13:27:20Z
  Generation:          1
  Resource Version:    957519
  UID:                 d4d869ff-a829-46d9-8dc8-72fd6bbf37ea
Spec:
  Conversion:
    Strategy:  None
  Group:       logstash.k8s.elastic.co
  Names:
    Categories:
      elastic
    Kind:       Logstash
    List Kind:  LogstashList
    Plural:     logstashes
    Short Names:
      ls
    Singular:  logstash
  Scope:       Namespaced
  Versions:
    Additional Printer Columns:
      Description:  Health
      Json Path:    .status.health
      Name:         health
      Type:         string
      Description:  Available nodes
      Json Path:    .status.availableNodes
      Name:         available
      Type:         integer
      Description:  Expected nodes
      Json Path:    .status.expectedNodes
      Name:         expected
      Type:         integer
      Json Path:    .metadata.creationTimestamp
      Name:         age
      Type:         date
      Description:  Logstash version
      Json Path:    .status.version
      Name:         version
      Type:         string
    Name:           v1alpha1
    Schema:
      openAPIV3Schema:
        Description:  Logstash is the Schema for the logstashes API
        Properties:
          API Version:
            Description:  APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            Type:  string
          Kind:
            Description:  Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            Type:  string
          Metadata:
            Type:  object
          Spec:
            Description:  LogstashSpec defines the desired state of Logstash
            Properties:
              Config:
                Description:                                   Config holds the Logstash configuration. At most one of [`Config`, `ConfigRef`] can be specified.
                Type:                                          object
                X - Kubernetes - Preserve - Unknown - Fields:  true
              Config Ref:
                Description:  ConfigRef contains a reference to an existing Kubernetes Secret holding the Logstash configuration.
Logstash settings must be specified as yaml, under a single "logstash.yml" entry. At most one of [`Config`, `ConfigRef`]
can be specified.
                Properties:
                  Secret Name:
                    Description:  SecretName is the name of the secret.
                    Type:         string
                Type:             object
              Count:
                Format:  int32
                Type:    integer
              Elasticsearch Refs:
                Description:  ElasticsearchRefs are references to Elasticsearch clusters running in the same Kubernetes cluster.
                Items:
                  Description:  ElasticsearchCluster is a named reference to an Elasticsearch cluster which can be used in a Logstash pipeline.
                  Properties:
                    Cluster Name:
                      Description:  ClusterName is an alias for the cluster to be used to refer to the Elasticsearch cluster in Logstash
configuration files, and will be used to identify "named clusters" in Logstash
                      Min Length:  1
                      Type:        string
                    Name:
                      Description:  Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
                      Type:         string
                    Namespace:
                      Description:  Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                      Type:         string
                    Secret Name:
                      Description:  SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
Elastic resource not managed by the operator. The referenced secret must contain the following:
- `url`: the URL to reach the Elastic resource
- `username`: the username of the user to be authenticated to the Elastic resource
- `password`: the password of the user to be authenticated to the Elastic resource
- `ca.crt`: the CA certificate in PEM format (optional)
- `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
This field cannot be used in combination with the other fields name, namespace or serviceName.
                      Type:  string
                    Service Name:
                      Description:  ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
the referenced resource is used.
                      Type:  string
                  Required:
                    clusterName
                  Type:  object
                Type:    array
              Image:
                Description:  Image is the Logstash Docker image to deploy. Version and Type have to match the Logstash in the image.
                Type:         string
              Monitoring:
                Description:  Monitoring enables you to collect and ship log and monitoring data of this Logstash.
Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
Elasticsearch monitoring clusters running in the same Kubernetes cluster.
                Properties:
                  Logs:
                    Description:  Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
                    Properties:
                      Elasticsearch Refs:
                        Description:  ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
Due to existing limitations, only a single Elasticsearch cluster is currently supported.
                        Items:
                          Description:  ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
or a Secret describing an external Elastic resource not managed by the operator.
                          Properties:
                            Name:
                              Description:  Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
                              Type:         string
                            Namespace:
                              Description:  Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                              Type:         string
                            Secret Name:
                              Description:  SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
Elastic resource not managed by the operator. The referenced secret must contain the following:
- `url`: the URL to reach the Elastic resource
- `username`: the username of the user to be authenticated to the Elastic resource
- `password`: the password of the user to be authenticated to the Elastic resource
- `ca.crt`: the CA certificate in PEM format (optional)
- `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
This field cannot be used in combination with the other fields name, namespace or serviceName.
                              Type:  string
                            Service Name:
                              Description:  ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
the referenced resource is used.
                              Type:  string
                          Type:      object
                        Type:        array
                    Type:            object
                  Metrics:
                    Description:  Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
                    Properties:
                      Elasticsearch Refs:
                        Description:  ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
Due to existing limitations, only a single Elasticsearch cluster is currently supported.
                        Items:
                          Description:  ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
or a Secret describing an external Elastic resource not managed by the operator.
                          Properties:
                            Name:
                              Description:  Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
                              Type:         string
                            Namespace:
                              Description:  Namespace of the Kubernetes object. If empty, defaults to the current namespace.
                              Type:         string
                            Secret Name:
                              Description:  SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
Elastic resource not managed by the operator. The referenced secret must contain the following:
- `url`: the URL to reach the Elastic resource
- `username`: the username of the user to be authenticated to the Elastic resource
- `password`: the password of the user to be authenticated to the Elastic resource
- `ca.crt`: the CA certificate in PEM format (optional)
- `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
This field cannot be used in combination with the other fields name, namespace or serviceName.
                              Type:  string
                            Service Name:
                              Description:  ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
the referenced resource is used.
                              Type:  string
                          Type:      object
                        Type:        array
                    Type:            object
                Type:                object
              Pipelines:
                Description:  Pipelines holds the Logstash Pipelines. At most one of [`Pipelines`, `PipelinesRef`] can be specified.
                Items:
                  Type:                                        object
                Type:                                          array
                X - Kubernetes - Preserve - Unknown - Fields:  true
              Pipelines Ref:
                Description:  PipelinesRef contains a reference to an existing Kubernetes Secret holding the Logstash Pipelines.
Logstash pipelines must be specified as yaml, under a single "pipelines.yml" entry. At most one of [`Pipelines`, `PipelinesRef`]
can be specified.
                Properties:
                  Secret Name:
                    Description:  SecretName is the name of the secret.
                    Type:         string
                Type:             object
              Pod Template:
                Description:                                   PodTemplate provides customisation options for the Logstash pods.
                Type:                                          object
                X - Kubernetes - Preserve - Unknown - Fields:  true
              Revision History Limit:
                Description:  RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSet.
                Format:       int32
                Type:         integer
              Secure Settings:
                Description:  SecureSettings is a list of references to Kubernetes Secrets containing sensitive configuration options for the Logstash.
Secrets data can be then referenced in the Logstash config using the Secret's keys or as specified in `Entries` field of
each SecureSetting.
                Items:
                  Description:  SecretSource defines a data source based on a Kubernetes Secret.
                  Properties:
                    Entries:
                      Description:  Entries define how to project each key-value pair in the secret to filesystem paths.
If not defined, all keys will be projected to similarly named paths in the filesystem.
If defined, only the specified keys will be projected to the corresponding paths.
                      Items:
                        Description:  KeyToPath defines how to map a key in a Secret object to a filesystem path.
                        Properties:
                          Key:
                            Description:  Key is the key contained in the secret.
                            Type:         string
                          Path:
                            Description:  Path is the relative file path to map the key to.
Path must not be an absolute file path and must not contain any ".." components.
                            Type:  string
                        Required:
                          key
                        Type:  object
                      Type:    array
                    Secret Name:
                      Description:  SecretName is the name of the secret.
                      Type:         string
                  Required:
                    secretName
                  Type:  object
                Type:    array
              Service Account Name:
                Description:  ServiceAccountName is used to check access from the current resource to Elasticsearch resource in a different namespace.
Can only be used if ECK is enforcing RBAC on references.
                Type:  string
              Services:
                Description:  Services contains details of services that Logstash should expose - similar to the HTTP layer configuration for the
rest of the stack, but also applicable for more use cases than the metrics API, as logstash may need to
be opened up for other services: Beats, TCP, UDP, etc, inputs.
                Items:
                  Properties:
                    Name:
                      Type:  string
                    Service:
                      Description:  Service defines the template for the associated Kubernetes Service object.
                      Properties:
                        Metadata:
                          Description:  ObjectMeta is the metadata of the service.
The name and namespace provided here are managed by ECK and will be ignored.
                          Properties:
                            Annotations:
                              Additional Properties:
                                Type:  string
                              Type:    object
                            Finalizers:
                              Items:
                                Type:  string
                              Type:    array
                            Labels:
                              Additional Properties:
                                Type:  string
                              Type:    object
                            Name:
                              Type:  string
                            Namespace:
                              Type:  string
                          Type:      object
                        Spec:
                          Description:  Spec is the specification of the service.
                          Properties:
                            Allocate Load Balancer Node Ports:
                              Description:  allocateLoadBalancerNodePorts defines if NodePorts will be automatically
allocated for services with type LoadBalancer.  Default is "true". It
may be set to "false" if the cluster load-balancer does not rely on
NodePorts.  If the caller requests specific NodePorts (by specifying a
value), those requests will be respected, regardless of this field.
This field may only be set for services with type LoadBalancer and will
be cleared if the type is changed to any other type.
                              Type:  boolean
                            Cluster IP:
                              Description:  clusterIP is the IP address of the service and is usually assigned
randomly. If an address is specified manually, is in-range (as per
system configuration), and is not in use, it will be allocated to the
service; otherwise creation of the service will fail. This field may not
be changed through updates unless the type field is also being changed
to ExternalName (which requires this field to be blank) or the type
field is being changed from ExternalName (in which case this field may
optionally be specified, as describe above).  Valid values are "None",
empty string (""), or a valid IP address. Setting this to "None" makes a
"headless service" (no virtual IP), which is useful when direct endpoint
connections are preferred and proxying is not required.  Only applies to
types ClusterIP, NodePort, and LoadBalancer. If this field is specified
when creating a Service of type ExternalName, creation will fail. This
field will be wiped when updating a Service to type ExternalName.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                              Type:  string
                            Cluster I Ps:
                              Description:  ClusterIPs is a list of IP addresses assigned to this service, and are
usually assigned randomly.  If an address is specified manually, is
in-range (as per system configuration), and is not in use, it will be
allocated to the service; otherwise creation of the service will fail.
This field may not be changed through updates unless the type field is
also being changed to ExternalName (which requires this field to be
empty) or the type field is being changed from ExternalName (in which
case this field may optionally be specified, as describe above).  Valid
values are "None", empty string (""), or a valid IP address.  Setting
this to "None" makes a "headless service" (no virtual IP), which is
useful when direct endpoint connections are preferred and proxying is
not required.  Only applies to types ClusterIP, NodePort, and
LoadBalancer. If this field is specified when creating a Service of type
ExternalName, creation will fail. This field will be wiped when updating
a Service to type ExternalName.  If this field is not specified, it will
be initialized from the clusterIP field.  If this field is specified,
clients must ensure that clusterIPs[0] and clusterIP have the same
value.

This field may hold a maximum of two entries (dual-stack IPs, in either order).
These IPs must correspond to the values of the ipFamilies field. Both
clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                              Items:
                                Type:                        string
                              Type:                          array
                              X - Kubernetes - List - Type:  atomic
                            External I Ps:
                              Description:  externalIPs is a list of IP addresses for which nodes in the cluster
will also accept traffic for this service.  These IPs are not managed by
Kubernetes.  The user is responsible for ensuring that traffic arrives
at a node with this IP.  A common example is external load-balancers
that are not part of the Kubernetes system.
                              Items:
                                Type:                        string
                              Type:                          array
                              X - Kubernetes - List - Type:  atomic
                            External Name:
                              Description:  externalName is the external reference that discovery mechanisms will
return as an alias for this service (e.g. a DNS CNAME record). No
proxying will be involved.  Must be a lowercase RFC-1123 hostname
(https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                              Type:  string
                            External Traffic Policy:
                              Description:  externalTrafficPolicy describes how nodes distribute service traffic they
receive on one of the Service's "externally-facing" addresses (NodePorts,
ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
the service in a way that assumes that external load balancers will take care
of balancing the service traffic between nodes, and so each node will deliver
traffic only to the node-local endpoints of the service, without masquerading
the client source IP. (Traffic mistakenly sent to a node with no endpoints will
be dropped.) The default value, "Cluster", uses the standard behavior of
routing to all endpoints evenly (possibly modified by topology and other
features). Note that traffic sent to an External IP or LoadBalancer IP from
within the cluster will always get "Cluster" semantics, but clients sending to
a NodePort from within the cluster may need to take traffic policy into account
when picking a node.
                              Type:  string
                            Health Check Node Port:
                              Description:  healthCheckNodePort specifies the healthcheck nodePort for the service.
This only applies when type is set to LoadBalancer and
externalTrafficPolicy is set to Local. If a value is specified, is
in-range, and is not in use, it will be used.  If not specified, a value
will be automatically allocated.  External systems (e.g. load-balancers)
can use this port to determine if a given node holds endpoints for this
service or not.  If this field is specified when creating a Service
which does not need it, creation will fail. This field will be wiped
when updating a Service to no longer need it (e.g. changing type).
This field cannot be updated once set.
                              Format:  int32
                              Type:    integer
                            Internal Traffic Policy:
                              Description:  InternalTrafficPolicy describes how nodes distribute service traffic they
receive on the ClusterIP. If set to "Local", the proxy will assume that pods
only want to talk to endpoints of the service on the same node as the pod,
dropping the traffic if there are no local endpoints. The default value,
"Cluster", uses the standard behavior of routing to all endpoints evenly
(possibly modified by topology and other features).
                              Type:  string
                            Ip Families:
                              Description:  IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
service. This field is usually assigned automatically based on cluster
configuration and the ipFamilyPolicy field. If this field is specified
manually, the requested family is available in the cluster,
and ipFamilyPolicy allows it, it will be used; otherwise creation of
the service will fail. This field is conditionally mutable: it allows
for adding or removing a secondary IP family, but it does not allow
changing the primary IP family of the Service. Valid values are "IPv4"
and "IPv6".  This field only applies to Services of types ClusterIP,
NodePort, and LoadBalancer, and does apply to "headless" services.
This field will be wiped when updating a Service to type ExternalName.

This field may hold a maximum of two entries (dual-stack families, in
either order).  These families must correspond to the values of the
clusterIPs field, if specified. Both clusterIPs and ipFamilies are
governed by the ipFamilyPolicy field.
                              Items:
                                Description:  IPFamily represents the IP Family (IPv4 or IPv6). This type is used
to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                                Type:                        string
                              Type:                          array
                              X - Kubernetes - List - Type:  atomic
                            Ip Family Policy:
                              Description:  IPFamilyPolicy represents the dual-stack-ness requested or required by
this Service. If there is no value provided, then this field will be set
to SingleStack. Services can be "SingleStack" (a single IP family),
"PreferDualStack" (two IP families on dual-stack configured clusters or
a single IP family on single-stack clusters), or "RequireDualStack"
(two IP families on dual-stack configured clusters, otherwise fail). The
ipFamilies and clusterIPs fields depend on the value of this field. This
field will be wiped when updating a service to type ExternalName.
                              Type:  string
                            Load Balancer Class:
                              Description:  loadBalancerClass is the class of the load balancer implementation this Service belongs to.
If specified, the value of this field must be a label-style identifier, with an optional prefix,
e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
balancer implementation is used, today this is typically done through the cloud provider integration,
but should apply for any default implementation. If set, it is assumed that a load balancer
implementation is watching for Services with a matching class. Any default load balancer
implementation (e.g. cloud providers) should ignore Services that set this field.
This field can only be set when creating or updating a Service to type 'LoadBalancer'.
Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                              Type:  string
                            Load Balancer IP:
                              Description:  Only applies to Service Type: LoadBalancer.
This feature depends on whether the underlying cloud-provider supports specifying
the loadBalancerIP when a load balancer is created.
This field will be ignored if the cloud-provider does not support the feature.
Deprecated: This field was under-specified and its meaning varies across implementations.
Using it is non-portable and it may not support dual-stack.
Users are encouraged to use implementation-specific annotations when available.
                              Type:  string
                            Load Balancer Source Ranges:
                              Description:  If specified and supported by the platform, this will restrict traffic through the cloud-provider
load-balancer will be restricted to the specified client IPs. This field will be ignored if the
cloud-provider does not support the feature."
More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
                              Items:
                                Type:                        string
                              Type:                          array
                              X - Kubernetes - List - Type:  atomic
                            Ports:
                              Description:  The list of ports that are exposed by this service.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                              Items:
                                Description:  ServicePort contains information on service's port.
                                Properties:
                                  App Protocol:
                                    Description:  The application protocol for this port.
This is used as a hint for implementations to offer richer behavior for protocols that they understand.
This field follows standard Kubernetes label syntax.
Valid values are either:

* Un-prefixed protocol names - reserved for IANA standard service names (as per
RFC-6335 and https://www.iana.org/assignments/service-names).

* Kubernetes-defined prefixed names:
  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455

* Other protocols should use implementation-defined prefixed names such as
mycompany.com/my-custom-protocol.
                                    Type:  string
                                  Name:
                                    Description:  The name of this port within the service. This must be a DNS_LABEL.
All ports within a ServiceSpec must have unique names. When considering
the endpoints for a Service, this must match the 'name' field in the
EndpointPort.
Optional if only one ServicePort is defined on this service.
                                    Type:  string
                                  Node Port:
                                    Description:  The port on each node on which this service is exposed when type is
NodePort or LoadBalancer.  Usually assigned by the system. If a value is
specified, in-range, and not in use it will be used, otherwise the
operation will fail.  If not specified, a port will be allocated if this
Service requires one.  If this field is specified when creating a
Service which does not need it, creation will fail. This field will be
wiped when updating a Service to no longer need it (e.g. changing type
from NodePort to ClusterIP).
More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                                    Format:  int32
                                    Type:    integer
                                  Port:
                                    Description:  The port that will be exposed by this service.
                                    Format:       int32
                                    Type:         integer
                                  Protocol:
                                    Default:      TCP
                                    Description:  The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
Default is TCP.
                                    Type:  string
                                  Target Port:
                                    Any Of:
                                      Type:       integer
                                      Type:       string
                                    Description:  Number or name of the port to access on the pods targeted by the service.
Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
If this is a string, it will be looked up as a named port in the
target Pod's container ports. If this is not specified, the value
of the 'port' field is used (an identity map).
This field is ignored for services with clusterIP=None, and should be
omitted or set equal to the 'port' field.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
                                    X - Kubernetes - Int - Or - String:  true
                                Required:
                                  port
                                Type:  object
                              Type:    array
                              X - Kubernetes - List - Map - Keys:
                                port
                                protocol
                              X - Kubernetes - List - Type:  map
                            Publish Not Ready Addresses:
                              Description:  publishNotReadyAddresses indicates that any agent which deals with endpoints for this
Service should disregard any indications of ready/not-ready.
The primary use case for setting this field is for a StatefulSet's Headless Service to
propagate SRV DNS records for its Pods for the purpose of peer discovery.
The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
Services interpret this to mean that all endpoints are considered "ready" even if the
Pods themselves are not. Agents which consume only Kubernetes generated endpoints
through the Endpoints or EndpointSlice resources can safely assume this behavior.
                              Type:  boolean
                            Selector:
                              Additional Properties:
                                Type:       string
                              Description:  Route service traffic to pods with label keys and values matching this
selector. If empty or not present, the service is assumed to have an
external process managing its endpoints, which Kubernetes will not
modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
Ignored if type is ExternalName.
More info: https://kubernetes.io/docs/concepts/services-networking/service/
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                            Session Affinity:
                              Description:  Supports "ClientIP" and "None". Used to maintain session affinity.
Enable client IP based session affinity.
Must be ClientIP or None.
Defaults to None.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                              Type:  string
                            Session Affinity Config:
                              Description:  sessionAffinityConfig contains the configurations of session affinity.
                              Properties:
                                Client IP:
                                  Description:  clientIP contains the configurations of Client IP based session affinity.
                                  Properties:
                                    Timeout Seconds:
                                      Description:  timeoutSeconds specifies the seconds of ClientIP type session sticky time.
The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
Default value is 10800(for 3 hours).
                                      Format:  int32
                                      Type:    integer
                                  Type:        object
                              Type:            object
                            Traffic Distribution:
                              Description:  TrafficDistribution offers a way to express preferences for how traffic is
distributed to Service endpoints. Implementations can use this field as a
hint, but are not required to guarantee strict adherence. If the field is
not set, the implementation will apply its default routing strategy. If set
to "PreferClose", implementations should prioritize endpoints that are
topologically close (e.g., same zone).
This is a beta field and requires enabling ServiceTrafficDistribution feature.
                              Type:  string
                            Type:
                              Description:  type determines how the Service is exposed. Defaults to ClusterIP. Valid
options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
"ClusterIP" allocates a cluster-internal IP address for load-balancing
to endpoints. Endpoints are determined by the selector or if that is not
specified, by manual construction of an Endpoints object or
EndpointSlice objects. If clusterIP is "None", no virtual IP is
allocated and the endpoints are published as a set of endpoints rather
than a virtual IP.
"NodePort" builds on ClusterIP and allocates a port on every node which
routes to the same endpoints as the clusterIP.
"LoadBalancer" builds on NodePort and creates an external load-balancer
(if supported in the current cloud) which routes to the same endpoints
as the clusterIP.
"ExternalName" aliases this service to the specified externalName.
Several other fields do not apply to ExternalName services.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
                              Type:  string
                          Type:      object
                      Type:          object
                    Tls:
                      Description:  TLS defines options for configuring TLS for HTTP.
                      Properties:
                        Certificate:
                          Description:  Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
The referenced secret should contain the following:

- `ca.crt`: The certificate authority (optional).
- `tls.crt`: The certificate (or a chain).
- `tls.key`: The private key to the first certificate in the certificate chain.
                          Properties:
                            Secret Name:
                              Description:  SecretName is the name of the secret.
                              Type:         string
                          Type:             object
                        Self Signed Certificate:
                          Description:  SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
                          Properties:
                            Disabled:
                              Description:  Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
                              Type:         boolean
                            Subject Alt Names:
                              Description:  SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
                              Items:
                                Description:  SubjectAlternativeName represents a SAN entry in a x509 certificate.
                                Properties:
                                  Dns:
                                    Description:  DNS is the DNS name of the subject.
                                    Type:         string
                                  Ip:
                                    Description:  IP is the IP address of the subject.
                                    Type:         string
                                Type:             object
                              Type:               array
                          Type:                   object
                      Type:                       object
                  Type:                           object
                Type:                             array
              Update Strategy:
                Description:  UpdateStrategy is a StatefulSetUpdateStrategy. The default type is "RollingUpdate".
                Properties:
                  Rolling Update:
                    Description:  RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
                    Properties:
                      Max Unavailable:
                        Any Of:
                          Type:       integer
                          Type:       string
                        Description:  The maximum number of pods that can be unavailable during the update.
Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
Absolute number is calculated from percentage by rounding up. This can not be 0.
Defaults to 1. This field is alpha-level and is only honored by servers that enable the
MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to
Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it
will be counted towards MaxUnavailable.
                        X - Kubernetes - Int - Or - String:  true
                      Partition:
                        Description:  Partition indicates the ordinal at which the StatefulSet should be partitioned
for updates. During a rolling update, all pods from ordinal Replicas-1 to
Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched.
This is helpful in being able to do a canary based deployment. The default value is 0.
                        Format:  int32
                        Type:    integer
                    Type:        object
                  Type:
                    Description:  Type indicates the type of the StatefulSetUpdateStrategy.
Default is RollingUpdate.
                    Type:  string
                Type:      object
              Version:
                Description:  Version of the Logstash.
                Type:         string
              Volume Claim Templates:
                Description:  VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod.
Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate.
Items defined here take precedence over any default claims added by the operator with the same name.
                Items:
                  Description:  PersistentVolumeClaim is a user's request for and claim to a persistent volume
                  Properties:
                    API Version:
                      Description:  APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                      Type:  string
                    Kind:
                      Description:  Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                      Type:  string
                    Metadata:
                      Description:  Standard object's metadata.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                      Properties:
                        Annotations:
                          Additional Properties:
                            Type:  string
                          Type:    object
                        Finalizers:
                          Items:
                            Type:  string
                          Type:    array
                        Labels:
                          Additional Properties:
                            Type:  string
                          Type:    object
                        Name:
                          Type:  string
                        Namespace:
                          Type:  string
                      Type:      object
                    Spec:
                      Description:  spec defines the desired characteristics of a volume requested by a pod author.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                      Properties:
                        Access Modes:
                          Description:  accessModes contains the desired access modes the volume should have.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                          Items:
                            Type:                        string
                          Type:                          array
                          X - Kubernetes - List - Type:  atomic
                        Data Source:
                          Description:  dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                          Properties:
                            API Group:
                              Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                              Type:  string
                            Kind:
                              Description:  Kind is the type of resource being referenced
                              Type:         string
                            Name:
                              Description:  Name is the name of resource being referenced
                              Type:         string
                          Required:
                            kind
                            name
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                        Data Source Ref:
                          Description:  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                          Properties:
                            API Group:
                              Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                              Type:  string
                            Kind:
                              Description:  Kind is the type of resource being referenced
                              Type:         string
                            Name:
                              Description:  Name is the name of resource being referenced
                              Type:         string
                            Namespace:
                              Description:  Namespace is the namespace of resource being referenced
Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                              Type:  string
                          Required:
                            kind
                            name
                          Type:  object
                        Resources:
                          Description:  resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                          Properties:
                            Limits:
                              Additional Properties:
                                Any Of:
                                  Type:                              integer
                                  Type:                              string
                                Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                X - Kubernetes - Int - Or - String:  true
                              Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                              Type:  object
                            Requests:
                              Additional Properties:
                                Any Of:
                                  Type:                              integer
                                  Type:                              string
                                Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                X - Kubernetes - Int - Or - String:  true
                              Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                              Type:  object
                          Type:      object
                        Selector:
                          Description:  selector is a label query over volumes to consider for binding.
                          Properties:
                            Match Expressions:
                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              Items:
                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                Properties:
                                  Key:
                                    Description:  key is the label key that the selector applies to.
                                    Type:         string
                                  Operator:
                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                    Type:  string
                                  Values:
                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                    Items:
                                      Type:                        string
                                    Type:                          array
                                    X - Kubernetes - List - Type:  atomic
                                Required:
                                  key
                                  operator
                                Type:                        object
                              Type:                          array
                              X - Kubernetes - List - Type:  atomic
                            Match Labels:
                              Additional Properties:
                                Type:       string
                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                              Type:                     object
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                        Storage Class Name:
                          Description:  storageClassName is the name of the StorageClass required by the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                          Type:  string
                        Volume Attributes Class Name:
                          Description:  volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
If specified, the CSI driver will create or update the volume with the attributes defined
in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
will be set by the persistentvolume controller if it exists.
If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
exists.
More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
                          Type:  string
                        Volume Mode:
                          Description:  volumeMode defines what type of volume is required by the claim.
Value of Filesystem is implied when not included in claim spec.
                          Type:  string
                        Volume Name:
                          Description:  volumeName is the binding reference to the PersistentVolume backing this claim.
                          Type:         string
                      Type:             object
                    Status:
                      Description:  status represents the current information/status of a persistent volume claim.
Read-only.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                      Properties:
                        Access Modes:
                          Description:  accessModes contains the actual access modes the volume backing the PVC has.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                          Items:
                            Type:                        string
                          Type:                          array
                          X - Kubernetes - List - Type:  atomic
                        Allocated Resource Statuses:
                          Additional Properties:
                            Description:  When a controller receives persistentvolume claim update with ClaimResourceStatus for a resource
that it does not recognizes, then it should ignore that update and let other controllers
handle it.
                            Type:       string
                          Description:  allocatedResourceStatuses stores status of resource being resized for the given PVC.
Key names follow standard Kubernetes label syntax. Valid values are either:
  * Un-prefixed keys:
    - storage - the capacity of the volume.
  * Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
reserved and hence may not be used.

ClaimResourceStatus can be in any of following states:
  - ControllerResizeInProgress:
    State set when resize controller starts resizing the volume in control-plane.
  - ControllerResizeFailed:
    State set when resize has failed in resize controller with a terminal error.
  - NodeResizePending:
    State set when resize controller has finished resizing the volume but further resizing of
    volume is needed on the node.
  - NodeResizeInProgress:
    State set when kubelet starts resizing the volume.
  - NodeResizeFailed:
    State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
    NodeResizeFailed.
For example: if expanding a PVC for more capacity - this field can be one of the following states:
  - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
     - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
     - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
     - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
     - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
When this field is not set, it means that no resize operation is in progress for the given PVC.

A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus
should ignore the update for the purpose it was designed. For example - a controller that
only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
resources associated with PVC.

This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
                          Type:                         object
                          X - Kubernetes - Map - Type:  granular
                        Allocated Resources:
                          Additional Properties:
                            Any Of:
                              Type:                              integer
                              Type:                              string
                            Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            X - Kubernetes - Int - Or - String:  true
                          Description:                           allocatedResources tracks the resources allocated to a PVC including its capacity.
Key names follow standard Kubernetes label syntax. Valid values are either:
  * Un-prefixed keys:
    - storage - the capacity of the volume.
  * Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
reserved and hence may not be used.

Capacity reported here may be larger than the actual capacity when a volume expansion operation
is requested.
For storage quota, the larger value from allocatedResources and PVC.spec.resources is used.
If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.
If a volume expansion capacity request is lowered, allocatedResources is only
lowered if there are no expansion operations in progress and if the actual volume capacity
is equal or lower than the requested capacity.

A controller that receives PVC update with previously unknown resourceName
should ignore the update for the purpose it was designed. For example - a controller that
only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
resources associated with PVC.

This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
                          Type:  object
                        Capacity:
                          Additional Properties:
                            Any Of:
                              Type:                              integer
                              Type:                              string
                            Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            X - Kubernetes - Int - Or - String:  true
                          Description:                           capacity represents the actual resources of the underlying volume.
                          Type:                                  object
                        Conditions:
                          Description:  conditions is the current Condition of persistent volume claim. If underlying persistent volume is being
resized then the Condition will be set to 'Resizing'.
                          Items:
                            Description:  PersistentVolumeClaimCondition contains details about state of pvc
                            Properties:
                              Last Probe Time:
                                Description:  lastProbeTime is the time we probed the condition.
                                Format:       date-time
                                Type:         string
                              Last Transition Time:
                                Description:  lastTransitionTime is the time the condition transitioned from one status to another.
                                Format:       date-time
                                Type:         string
                              Message:
                                Description:  message is the human-readable message indicating details about last transition.
                                Type:         string
                              Reason:
                                Description:  reason is a unique, this should be a short, machine understandable string that gives the reason
for condition's last transition. If it reports "Resizing" that means the underlying
persistent volume is being resized.
                                Type:  string
                              Status:
                                Description:  Status is the status of the condition.
Can be True, False, Unknown.
More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required
                                Type:  string
                              Type:
                                Description:  Type is the type of the condition.
More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about
                                Type:  string
                            Required:
                              status
                              type
                            Type:  object
                          Type:    array
                          X - Kubernetes - List - Map - Keys:
                            type
                          X - Kubernetes - List - Type:  map
                        Current Volume Attributes Class Name:
                          Description:  currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim
This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
                          Type:  string
                        Modify Volume Status:
                          Description:  ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.
When this is unset, there is no ModifyVolume operation being attempted.
This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
                          Properties:
                            Status:
                              Description:  status is the status of the ControllerModifyVolume operation. It can be in any of following states:
 - Pending
   Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
   the specified VolumeAttributesClass not existing.
 - InProgress
   InProgress indicates that the volume is being modified.
 - Infeasible
  Infeasible indicates that the request has been rejected as invalid by the CSI driver. To
    resolve the error, a valid VolumeAttributesClass needs to be specified.
Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
                              Type:  string
                            Target Volume Attributes Class Name:
                              Description:  targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
                              Type:         string
                          Required:
                            status
                          Type:  object
                        Phase:
                          Description:  phase represents the current phase of PersistentVolumeClaim.
                          Type:         string
                      Type:             object
                  Type:                 object
                Type:                   array
            Required:
              version
            Type:  object
          Status:
            Description:  LogstashStatus defines the observed state of Logstash
            Properties:
              Available Nodes:
                Format:  int32
                Type:    integer
              Elasticsearch Associations Status:
                Additional Properties:
                  Description:  AssociationStatus is the status of an association resource.
                  Type:         string
                Description:    ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
                Type:           object
              Expected Nodes:
                Format:  int32
                Type:    integer
              Health:
                Type:  string
              Monitoring Association Status:
                Additional Properties:
                  Description:  AssociationStatus is the status of an association resource.
                  Type:         string
                Description:    MonitoringAssociationStatus is the status of any auto-linking to monitoring Elasticsearch clusters.
                Type:           object
              Observed Generation:
                Description:  ObservedGeneration is the most recent generation observed for this Logstash instance.
It corresponds to the metadata generation, which is updated on mutation by the API Server.
If the generation observed in status diverges from the generation in metadata, the Logstash
controller has not yet processed the changes contained in the Logstash specification.
                Format:  int64
                Type:    integer
              Selector:
                Type:  string
              Version:
                Description:  Version of the stack resource currently running. During version upgrades, multiple versions may run
in parallel: this value specifies the lowest version currently running.
                Type:  string
            Required:
              selector
            Type:  object
        Type:      object
    Served:        true
    Storage:       true
    Subresources:
      Scale:
        Label Selector Path:   .status.selector
        Spec Replicas Path:    .spec.count
        Status Replicas Path:  .status.expectedNodes
      Status:
Status:
  Accepted Names:
    Categories:
      elastic
    Kind:       Logstash
    List Kind:  LogstashList
    Plural:     logstashes
    Short Names:
      ls
    Singular:  logstash
  Conditions:
    Last Transition Time:  2025-05-07T13:27:20Z
    Message:               no conflicts found
    Reason:                NoConflicts
    Status:                True
    Type:                  NamesAccepted
    Last Transition Time:  2025-05-07T13:27:20Z
    Message:               the initial names have been accepted
    Reason:                InitialNamesAccepted
    Status:                True
    Type:                  Established
  Stored Versions:
    v1alpha1
Events:  <none>

